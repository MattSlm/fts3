/* fts3Stub.h
   Generated by gSOAP 2.7.16 from /home/simonm/tmp/build/src/ws-ifce/gsoap/gsoap_interface.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef fts3Stub_H
#define fts3Stub_H
#include <vector>
#define SOAP_NAMESPACE_OF_tns3	"http://transfer.data.glite.org"
#define SOAP_NAMESPACE_OF_impltns	"http://glite.org/wsdl/services/org.glite.data.transfer.fts"
#define SOAP_NAMESPACE_OF_config	"http://cern.ch/fts3/config"
#define SOAP_NAMESPACE_OF_delegation	"http://www.gridsite.org/namespaces/delegation-2"
#define SOAP_NAMESPACE_OF_log	"http://cern.ch/wsdl/services/fts3/log"
#ifndef WITH_NONAMESPACES
#define WITH_NONAMESPACES
#endif
#ifndef WITH_NOGLOBAL
#define WITH_NOGLOBAL
#endif
#include "stdsoap2.h"

namespace fts3 {

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not redeclare here */

#endif

#ifndef SOAP_TYPE_fts3__xop__Include
#define SOAP_TYPE_fts3__xop__Include (8)
/* Base64 schema type: */
struct _xop__Include
{
public:
	unsigned char *__ptr;
	int __size;
	char *id;	/* optional element of type xsd:string */
	char *type;	/* optional element of type xsd:string */
	char *options;	/* optional element of type xsd:string */
};
#endif
typedef struct _xop__Include _xop__Include;

#if 0 /* volatile type: do not redeclare here */

#endif

#ifndef SOAP_TYPE_fts3_tns3__TransferParams
#define SOAP_TYPE_fts3_tns3__TransferParams (12)
/* tns3:TransferParams */
class SOAP_CMAC tns3__TransferParams
{
public:
	std::vector<std::string >keys;	/* optional element of type xsd:string */
	std::vector<std::string >values;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_fts3_tns3__TransferParams */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns3__TransferParams(): soap(NULL) { tns3__TransferParams::soap_default(NULL); }
	virtual ~tns3__TransferParams() { }
};
#endif

#ifndef SOAP_TYPE_fts3_tns3__PlacementJob
#define SOAP_TYPE_fts3_tns3__PlacementJob (13)
/* tns3:PlacementJob */
class SOAP_CMAC tns3__PlacementJob
{
public:
	std::vector<std::string >logicalFiles;	/* optional element of type xsd:string */
	std::string *sourceSE;	/* optional element of type xsd:string */
	std::string *destSE;	/* optional element of type xsd:string */
	tns3__TransferParams *jobParams;	/* optional element of type tns3:TransferParams */
	std::string *credential;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE_fts3_tns3__PlacementJob */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns3__PlacementJob(): sourceSE(NULL), destSE(NULL), jobParams(NULL), credential(NULL), soap(NULL) { tns3__PlacementJob::soap_default(NULL); }
	virtual ~tns3__PlacementJob() { }
};
#endif

#ifndef SOAP_TYPE_fts3_tns3__TransferException
#define SOAP_TYPE_fts3_tns3__TransferException (14)
/* tns3:TransferException */
class SOAP_CMAC tns3__TransferException
{
public:
	std::string *message;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_fts3_tns3__TransferException */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns3__TransferException(): message(NULL), soap(NULL) { tns3__TransferException::soap_default(NULL); }
	virtual ~tns3__TransferException() { }
};
#endif

#ifndef SOAP_TYPE_fts3_tns3__TransferJobElement
#define SOAP_TYPE_fts3_tns3__TransferJobElement (19)
/* tns3:TransferJobElement */
class SOAP_CMAC tns3__TransferJobElement
{
public:
	std::string *source;	/* optional element of type xsd:string */
	std::string *dest;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE_fts3_tns3__TransferJobElement */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns3__TransferJobElement(): source(NULL), dest(NULL), soap(NULL) { tns3__TransferJobElement::soap_default(NULL); }
	virtual ~tns3__TransferJobElement() { }
};
#endif

#ifndef SOAP_TYPE_fts3_tns3__TransferJob
#define SOAP_TYPE_fts3_tns3__TransferJob (20)
/* tns3:TransferJob */
class SOAP_CMAC tns3__TransferJob
{
public:
	std::vector<tns3__TransferJobElement * >transferJobElements;	/* optional element of type tns3:TransferJobElement */
	tns3__TransferParams *jobParams;	/* optional element of type tns3:TransferParams */
	std::string *credential;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 20; } /* = unique id SOAP_TYPE_fts3_tns3__TransferJob */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns3__TransferJob(): jobParams(NULL), credential(NULL), soap(NULL) { tns3__TransferJob::soap_default(NULL); }
	virtual ~tns3__TransferJob() { }
};
#endif

#ifndef SOAP_TYPE_fts3_tns3__TransferJobElement2
#define SOAP_TYPE_fts3_tns3__TransferJobElement2 (21)
/* tns3:TransferJobElement2 */
class SOAP_CMAC tns3__TransferJobElement2
{
public:
	std::string *source;	/* optional element of type xsd:string */
	std::string *dest;	/* optional element of type xsd:string */
	std::string *checksum;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 21; } /* = unique id SOAP_TYPE_fts3_tns3__TransferJobElement2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns3__TransferJobElement2(): source(NULL), dest(NULL), checksum(NULL), soap(NULL) { tns3__TransferJobElement2::soap_default(NULL); }
	virtual ~tns3__TransferJobElement2() { }
};
#endif

#ifndef SOAP_TYPE_fts3_tns3__TransferJob2
#define SOAP_TYPE_fts3_tns3__TransferJob2 (22)
/* tns3:TransferJob2 */
class SOAP_CMAC tns3__TransferJob2
{
public:
	std::vector<tns3__TransferJobElement2 * >transferJobElements;	/* optional element of type tns3:TransferJobElement2 */
	tns3__TransferParams *jobParams;	/* optional element of type tns3:TransferParams */
	std::string *credential;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 22; } /* = unique id SOAP_TYPE_fts3_tns3__TransferJob2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns3__TransferJob2(): jobParams(NULL), credential(NULL), soap(NULL) { tns3__TransferJob2::soap_default(NULL); }
	virtual ~tns3__TransferJob2() { }
};
#endif

#ifndef SOAP_TYPE_fts3_tns3__TransferJobElement3
#define SOAP_TYPE_fts3_tns3__TransferJobElement3 (23)
/* tns3:TransferJobElement3 */
class SOAP_CMAC tns3__TransferJobElement3
{
public:
	std::string source;	/* required element of type xsd:string */
	std::string dest;	/* required element of type xsd:string */
	std::string *checksum;	/* optional element of type xsd:string */
	int *filesize;	/* optional element of type xsd:int */
	std::string *metadata;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 23; } /* = unique id SOAP_TYPE_fts3_tns3__TransferJobElement3 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns3__TransferJobElement3(): checksum(NULL), filesize(NULL), metadata(NULL), soap(NULL) { tns3__TransferJobElement3::soap_default(NULL); }
	virtual ~tns3__TransferJobElement3() { }
};
#endif

#ifndef SOAP_TYPE_fts3_tns3__TransferJob3
#define SOAP_TYPE_fts3_tns3__TransferJob3 (24)
/* tns3:TransferJob3 */
class SOAP_CMAC tns3__TransferJob3
{
public:
	std::vector<tns3__TransferJobElement3 * >transferJobElements;	/* required element of type tns3:TransferJobElement3 */
	tns3__TransferParams *jobParams;	/* required element of type tns3:TransferParams */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 24; } /* = unique id SOAP_TYPE_fts3_tns3__TransferJob3 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns3__TransferJob3(): jobParams(NULL), soap(NULL) { tns3__TransferJob3::soap_default(NULL); }
	virtual ~tns3__TransferJob3() { }
};
#endif

#ifndef SOAP_TYPE_fts3_tns3__JobStatus
#define SOAP_TYPE_fts3_tns3__JobStatus (25)
/* tns3:JobStatus */
class SOAP_CMAC tns3__JobStatus
{
public:
	std::string *jobID;	/* optional element of type xsd:string */
	std::string *jobStatus;	/* optional element of type xsd:string */
	std::string *clientDN;	/* optional element of type xsd:string */
	std::string *reason;	/* optional element of type xsd:string */
	std::string *voName;	/* optional element of type xsd:string */
	LONG64 submitTime;	/* required element of type xsd:long */
	int numFiles;	/* required element of type xsd:int */
	int priority;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 25; } /* = unique id SOAP_TYPE_fts3_tns3__JobStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns3__JobStatus(): jobID(NULL), jobStatus(NULL), clientDN(NULL), reason(NULL), voName(NULL), soap(NULL) { tns3__JobStatus::soap_default(NULL); }
	virtual ~tns3__JobStatus() { }
};
#endif

#ifndef SOAP_TYPE_fts3_tns3__FileTransferStatus
#define SOAP_TYPE_fts3_tns3__FileTransferStatus (26)
/* tns3:FileTransferStatus */
class SOAP_CMAC tns3__FileTransferStatus
{
public:
	std::string *logicalName;	/* optional element of type xsd:string */
	std::string *sourceSURL;	/* optional element of type xsd:string */
	std::string *destSURL;	/* optional element of type xsd:string */
	std::string *transferFileState;	/* optional element of type xsd:string */
	int numFailures;	/* required element of type xsd:int */
	std::string *reason;	/* optional element of type xsd:string */
	std::string *reason_USCOREclass;	/* optional element of type xsd:string */
	LONG64 duration;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 26; } /* = unique id SOAP_TYPE_fts3_tns3__FileTransferStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns3__FileTransferStatus(): logicalName(NULL), sourceSURL(NULL), destSURL(NULL), transferFileState(NULL), reason(NULL), reason_USCOREclass(NULL), soap(NULL) { tns3__FileTransferStatus::soap_default(NULL); }
	virtual ~tns3__FileTransferStatus() { }
};
#endif

#ifndef SOAP_TYPE_fts3_tns3__TransferJobSummary
#define SOAP_TYPE_fts3_tns3__TransferJobSummary (29)
/* tns3:TransferJobSummary */
class SOAP_CMAC tns3__TransferJobSummary
{
public:
	tns3__JobStatus *jobStatus;	/* optional element of type tns3:JobStatus */
	int numDone;	/* required element of type xsd:int */
	int numActive;	/* required element of type xsd:int */
	int numPending;	/* required element of type xsd:int */
	int numCanceled;	/* required element of type xsd:int */
	int numCanceling;	/* required element of type xsd:int */
	int numFailed;	/* required element of type xsd:int */
	int numFinished;	/* required element of type xsd:int */
	int numSubmitted;	/* required element of type xsd:int */
	int numHold;	/* required element of type xsd:int */
	int numWaiting;	/* required element of type xsd:int */
	int numCatalogFailed;	/* required element of type xsd:int */
	int numRestarted;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 29; } /* = unique id SOAP_TYPE_fts3_tns3__TransferJobSummary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns3__TransferJobSummary(): jobStatus(NULL), soap(NULL) { tns3__TransferJobSummary::soap_default(NULL); }
	virtual ~tns3__TransferJobSummary() { }
};
#endif

#ifndef SOAP_TYPE_fts3_tns3__StringPair
#define SOAP_TYPE_fts3_tns3__StringPair (33)
/* tns3:StringPair */
class SOAP_CMAC tns3__StringPair
{
public:
	std::string *string1;	/* optional element of type xsd:string */
	std::string *string2;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 33; } /* = unique id SOAP_TYPE_fts3_tns3__StringPair */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns3__StringPair(): string1(NULL), string2(NULL), soap(NULL) { tns3__StringPair::soap_default(NULL); }
	virtual ~tns3__StringPair() { }
};
#endif

#ifndef SOAP_TYPE_fts3_tns3__Roles
#define SOAP_TYPE_fts3_tns3__Roles (34)
/* tns3:Roles */
class SOAP_CMAC tns3__Roles
{
public:
	std::string *clientDN;	/* optional element of type xsd:string */
	std::string *serviceAdmin;	/* optional element of type xsd:string */
	std::string *submitter;	/* optional element of type xsd:string */
	std::vector<tns3__StringPair * >VOManager;	/* optional element of type tns3:StringPair */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 34; } /* = unique id SOAP_TYPE_fts3_tns3__Roles */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns3__Roles(): clientDN(NULL), serviceAdmin(NULL), submitter(NULL), soap(NULL) { tns3__Roles::soap_default(NULL); }
	virtual ~tns3__Roles() { }
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__ArrayOf_USCOREsoapenc_USCOREstring
#define SOAP_TYPE_fts3_impltns__ArrayOf_USCOREsoapenc_USCOREstring (35)
/* impltns:ArrayOf_soapenc_string */
class SOAP_CMAC impltns__ArrayOf_USCOREsoapenc_USCOREstring
{
public:
	std::vector<std::string >item;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 35; } /* = unique id SOAP_TYPE_fts3_impltns__ArrayOf_USCOREsoapenc_USCOREstring */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         impltns__ArrayOf_USCOREsoapenc_USCOREstring(): soap(NULL) { impltns__ArrayOf_USCOREsoapenc_USCOREstring::soap_default(NULL); }
	virtual ~impltns__ArrayOf_USCOREsoapenc_USCOREstring() { }
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__ArrayOf_USCOREtns3_USCOREJobStatus
#define SOAP_TYPE_fts3_impltns__ArrayOf_USCOREtns3_USCOREJobStatus (36)
/* impltns:ArrayOf_tns3_JobStatus */
class SOAP_CMAC impltns__ArrayOf_USCOREtns3_USCOREJobStatus
{
public:
	std::vector<tns3__JobStatus * >item;	/* optional element of type tns3:JobStatus */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 36; } /* = unique id SOAP_TYPE_fts3_impltns__ArrayOf_USCOREtns3_USCOREJobStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         impltns__ArrayOf_USCOREtns3_USCOREJobStatus(): soap(NULL) { impltns__ArrayOf_USCOREtns3_USCOREJobStatus::soap_default(NULL); }
	virtual ~impltns__ArrayOf_USCOREtns3_USCOREJobStatus() { }
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__ArrayOf_USCOREtns3_USCOREFileTransferStatus
#define SOAP_TYPE_fts3_impltns__ArrayOf_USCOREtns3_USCOREFileTransferStatus (37)
/* impltns:ArrayOf_tns3_FileTransferStatus */
class SOAP_CMAC impltns__ArrayOf_USCOREtns3_USCOREFileTransferStatus
{
public:
	std::vector<tns3__FileTransferStatus * >item;	/* optional element of type tns3:FileTransferStatus */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 37; } /* = unique id SOAP_TYPE_fts3_impltns__ArrayOf_USCOREtns3_USCOREFileTransferStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         impltns__ArrayOf_USCOREtns3_USCOREFileTransferStatus(): soap(NULL) { impltns__ArrayOf_USCOREtns3_USCOREFileTransferStatus::soap_default(NULL); }
	virtual ~impltns__ArrayOf_USCOREtns3_USCOREFileTransferStatus() { }
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__ArrayOf_USCOREtns3_USCOREFileTransferStatus2
#define SOAP_TYPE_fts3_impltns__ArrayOf_USCOREtns3_USCOREFileTransferStatus2 (38)
/* impltns:ArrayOf_tns3_FileTransferStatus2 */
class SOAP_CMAC impltns__ArrayOf_USCOREtns3_USCOREFileTransferStatus2
{
public:
	std::vector<class tns3__FileTransferStatus2 * >item;	/* optional element of type tns3:FileTransferStatus2 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 38; } /* = unique id SOAP_TYPE_fts3_impltns__ArrayOf_USCOREtns3_USCOREFileTransferStatus2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         impltns__ArrayOf_USCOREtns3_USCOREFileTransferStatus2(): soap(NULL) { impltns__ArrayOf_USCOREtns3_USCOREFileTransferStatus2::soap_default(NULL); }
	virtual ~impltns__ArrayOf_USCOREtns3_USCOREFileTransferStatus2() { }
};
#endif

#ifndef SOAP_TYPE_fts3_config__Configuration
#define SOAP_TYPE_fts3_config__Configuration (39)
/* config:Configuration */
class SOAP_CMAC config__Configuration
{
public:
	std::vector<std::string >cfg;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 39; } /* = unique id SOAP_TYPE_fts3_config__Configuration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         config__Configuration(): soap(NULL) { config__Configuration::soap_default(NULL); }
	virtual ~config__Configuration() { }
};
#endif

#ifndef SOAP_TYPE_fts3_config__ConfigurationException
#define SOAP_TYPE_fts3_config__ConfigurationException (40)
/* config:ConfigurationException */
class SOAP_CMAC config__ConfigurationException
{
public:
	std::string *message;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 40; } /* = unique id SOAP_TYPE_fts3_config__ConfigurationException */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         config__ConfigurationException(): message(NULL), soap(NULL) { config__ConfigurationException::soap_default(NULL); }
	virtual ~config__ConfigurationException() { }
};
#endif

#ifndef SOAP_TYPE_fts3_delegation__NewProxyReq
#define SOAP_TYPE_fts3_delegation__NewProxyReq (45)
/* delegation:NewProxyReq */
class SOAP_CMAC delegation__NewProxyReq
{
public:
	std::string *proxyRequest;	/* optional element of type xsd:string */
	std::string *delegationID;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 45; } /* = unique id SOAP_TYPE_fts3_delegation__NewProxyReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         delegation__NewProxyReq(): proxyRequest(NULL), delegationID(NULL), soap(NULL) { delegation__NewProxyReq::soap_default(NULL); }
	virtual ~delegation__NewProxyReq() { }
};
#endif

#ifndef SOAP_TYPE_fts3__delegation__DelegationException
#define SOAP_TYPE_fts3__delegation__DelegationException (46)
/* delegation:DelegationException */
class SOAP_CMAC _delegation__DelegationException
{
public:
	std::string *msg;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 46; } /* = unique id SOAP_TYPE_fts3__delegation__DelegationException */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _delegation__DelegationException(): msg(NULL), soap(NULL) { _delegation__DelegationException::soap_default(NULL); }
	virtual ~_delegation__DelegationException() { }
};
#endif

#ifndef SOAP_TYPE_fts3_log__Log
#define SOAP_TYPE_fts3_log__Log (47)
/* log:Log */
class SOAP_CMAC log__Log
{
public:
	struct _xop__Include xop__Include;	/* required element of type xop:Include */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 47; } /* = unique id SOAP_TYPE_fts3_log__Log */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         log__Log(): soap(NULL) { log__Log::soap_default(NULL); }
	virtual ~log__Log() { }
};
#endif

#ifndef SOAP_TYPE_fts3_log__LogInternal
#define SOAP_TYPE_fts3_log__LogInternal (48)
/* log:LogInternal */
class SOAP_CMAC log__LogInternal
{
public:
	std::vector<log__Log * >logsdata;	/* required element of type log:Log */
	std::vector<std::string >lognames;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 48; } /* = unique id SOAP_TYPE_fts3_log__LogInternal */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         log__LogInternal(): soap(NULL) { log__LogInternal::soap_default(NULL); }
	virtual ~log__LogInternal() { }
};
#endif

#ifndef SOAP_TYPE_fts3_tns3__InvalidArgumentException
#define SOAP_TYPE_fts3_tns3__InvalidArgumentException (15)
/* tns3:InvalidArgumentException */
class SOAP_CMAC tns3__InvalidArgumentException : public tns3__TransferException
{
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE_fts3_tns3__InvalidArgumentException */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns3__InvalidArgumentException() { tns3__InvalidArgumentException::soap_default(NULL); }
	virtual ~tns3__InvalidArgumentException() { }
};
#endif

#ifndef SOAP_TYPE_fts3_tns3__AuthorizationException
#define SOAP_TYPE_fts3_tns3__AuthorizationException (16)
/* tns3:AuthorizationException */
class SOAP_CMAC tns3__AuthorizationException : public tns3__TransferException
{
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE_fts3_tns3__AuthorizationException */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns3__AuthorizationException() { tns3__AuthorizationException::soap_default(NULL); }
	virtual ~tns3__AuthorizationException() { }
};
#endif

#ifndef SOAP_TYPE_fts3_tns3__ServiceBusyException
#define SOAP_TYPE_fts3_tns3__ServiceBusyException (17)
/* tns3:ServiceBusyException */
class SOAP_CMAC tns3__ServiceBusyException : public tns3__TransferException
{
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE_fts3_tns3__ServiceBusyException */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns3__ServiceBusyException() { tns3__ServiceBusyException::soap_default(NULL); }
	virtual ~tns3__ServiceBusyException() { }
};
#endif

#ifndef SOAP_TYPE_fts3_tns3__InternalException
#define SOAP_TYPE_fts3_tns3__InternalException (18)
/* tns3:InternalException */
class SOAP_CMAC tns3__InternalException : public tns3__TransferException
{
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE_fts3_tns3__InternalException */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns3__InternalException() { tns3__InternalException::soap_default(NULL); }
	virtual ~tns3__InternalException() { }
};
#endif

#ifndef SOAP_TYPE_fts3_tns3__NotExistsException
#define SOAP_TYPE_fts3_tns3__NotExistsException (27)
/* tns3:NotExistsException */
class SOAP_CMAC tns3__NotExistsException : public tns3__TransferException
{
public:
	virtual int soap_type() const { return 27; } /* = unique id SOAP_TYPE_fts3_tns3__NotExistsException */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns3__NotExistsException() { tns3__NotExistsException::soap_default(NULL); }
	virtual ~tns3__NotExistsException() { }
};
#endif

#ifndef SOAP_TYPE_fts3_tns3__FileTransferStatus2
#define SOAP_TYPE_fts3_tns3__FileTransferStatus2 (28)
/* tns3:FileTransferStatus2 */
class SOAP_CMAC tns3__FileTransferStatus2 : public tns3__FileTransferStatus
{
public:
	std::string *error_USCOREscope;	/* optional element of type xsd:string */
	std::string *error_USCOREphase;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 28; } /* = unique id SOAP_TYPE_fts3_tns3__FileTransferStatus2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns3__FileTransferStatus2(): error_USCOREscope(NULL), error_USCOREphase(NULL) { tns3__FileTransferStatus2::soap_default(NULL); }
	virtual ~tns3__FileTransferStatus2() { }
};
#endif

#ifndef SOAP_TYPE_fts3_tns3__TransferJobSummary2
#define SOAP_TYPE_fts3_tns3__TransferJobSummary2 (30)
/* tns3:TransferJobSummary2 */
class SOAP_CMAC tns3__TransferJobSummary2 : public tns3__TransferJobSummary
{
public:
	int numReady;	/* required element of type xsd:int */
	int numFinishing;	/* required element of type xsd:int */
	int numAwaitingPrestage;	/* required element of type xsd:int */
	int numPrestaging;	/* required element of type xsd:int */
	int numWaitingCatalogRegistration;	/* required element of type xsd:int */
	int numWaitingCatalogResolution;	/* required element of type xsd:int */
	int numWaitingPrestage;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 30; } /* = unique id SOAP_TYPE_fts3_tns3__TransferJobSummary2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns3__TransferJobSummary2() { tns3__TransferJobSummary2::soap_default(NULL); }
	virtual ~tns3__TransferJobSummary2() { }
};
#endif

#ifndef SOAP_TYPE_fts3_tns3__CannotCancelException
#define SOAP_TYPE_fts3_tns3__CannotCancelException (31)
/* tns3:CannotCancelException */
class SOAP_CMAC tns3__CannotCancelException : public tns3__TransferException
{
public:
	virtual int soap_type() const { return 31; } /* = unique id SOAP_TYPE_fts3_tns3__CannotCancelException */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns3__CannotCancelException() { tns3__CannotCancelException::soap_default(NULL); }
	virtual ~tns3__CannotCancelException() { }
};
#endif

#ifndef SOAP_TYPE_fts3_tns3__ExistsException
#define SOAP_TYPE_fts3_tns3__ExistsException (32)
/* tns3:ExistsException */
class SOAP_CMAC tns3__ExistsException : public tns3__TransferException
{
public:
	virtual int soap_type() const { return 32; } /* = unique id SOAP_TYPE_fts3_tns3__ExistsException */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns3__ExistsException() { tns3__ExistsException::soap_default(NULL); }
	virtual ~tns3__ExistsException() { }
};
#endif

#ifndef SOAP_TYPE_fts3_config__InvalidConfigurationException
#define SOAP_TYPE_fts3_config__InvalidConfigurationException (41)
/* config:InvalidConfigurationException */
class SOAP_CMAC config__InvalidConfigurationException : public config__ConfigurationException
{
public:
	virtual int soap_type() const { return 41; } /* = unique id SOAP_TYPE_fts3_config__InvalidConfigurationException */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         config__InvalidConfigurationException() { config__InvalidConfigurationException::soap_default(NULL); }
	virtual ~config__InvalidConfigurationException() { }
};
#endif

#ifndef SOAP_TYPE_fts3_config__AuthorizationException
#define SOAP_TYPE_fts3_config__AuthorizationException (42)
/* config:AuthorizationException */
class SOAP_CMAC config__AuthorizationException : public config__ConfigurationException
{
public:
	virtual int soap_type() const { return 42; } /* = unique id SOAP_TYPE_fts3_config__AuthorizationException */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         config__AuthorizationException() { config__AuthorizationException::soap_default(NULL); }
	virtual ~config__AuthorizationException() { }
};
#endif

#ifndef SOAP_TYPE_fts3_config__ServiceBusyException
#define SOAP_TYPE_fts3_config__ServiceBusyException (43)
/* config:ServiceBusyException */
class SOAP_CMAC config__ServiceBusyException : public config__ConfigurationException
{
public:
	virtual int soap_type() const { return 43; } /* = unique id SOAP_TYPE_fts3_config__ServiceBusyException */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         config__ServiceBusyException() { config__ServiceBusyException::soap_default(NULL); }
	virtual ~config__ServiceBusyException() { }
};
#endif

#ifndef SOAP_TYPE_fts3_config__InternalException
#define SOAP_TYPE_fts3_config__InternalException (44)
/* config:InternalException */
class SOAP_CMAC config__InternalException : public config__ConfigurationException
{
public:
	virtual int soap_type() const { return 44; } /* = unique id SOAP_TYPE_fts3_config__InternalException */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         config__InternalException() { config__InternalException::soap_default(NULL); }
	virtual ~config__InternalException() { }
};
#endif

#ifndef SOAP_TYPE_fts3_SOAP_ENV__Detail
#define SOAP_TYPE_fts3_SOAP_ENV__Detail (72)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	_delegation__DelegationException *delegation__DelegationException;	/* optional element of type delegation:DelegationException */
	config__AuthorizationException *config__AuthorizationExceptionElement;	/* optional element of type config:AuthorizationException */
	config__InternalException *config__InternalExceptionElement;	/* optional element of type config:InternalException */
	config__InvalidConfigurationException *config__InvalidConfigurationExceptionElement;	/* optional element of type config:InvalidConfigurationException */
	config__ServiceBusyException *config__ServiceBusyExceptionElement;	/* optional element of type config:ServiceBusyException */
	tns3__AuthorizationException *tns3__AuthorizationExceptionElement;	/* optional element of type tns3:AuthorizationException */
	tns3__CannotCancelException *tns3__CannotCancelExceptionElement;	/* optional element of type tns3:CannotCancelException */
	tns3__ExistsException *tns3__ExistsExceptionElement;	/* optional element of type tns3:ExistsException */
	tns3__InternalException *tns3__InternalExceptionElement;	/* optional element of type tns3:InternalException */
	tns3__InvalidArgumentException *tns3__InvalidArgumentExceptionElement;	/* optional element of type tns3:InvalidArgumentException */
	tns3__NotExistsException *tns3__NotExistsExceptionElement;	/* optional element of type tns3:NotExistsException */
	tns3__ServiceBusyException *tns3__ServiceBusyExceptionElement;	/* optional element of type tns3:ServiceBusyException */
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_fts3_delegation__getVersionResponse
#define SOAP_TYPE_fts3_delegation__getVersionResponse (87)
/* delegation:getVersionResponse */
struct delegation__getVersionResponse
{
public:
	std::string getVersionReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts3_delegation__getVersion
#define SOAP_TYPE_fts3_delegation__getVersion (90)
/* delegation:getVersion */
struct delegation__getVersion
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_fts3_delegation__getInterfaceVersionResponse
#define SOAP_TYPE_fts3_delegation__getInterfaceVersionResponse (91)
/* delegation:getInterfaceVersionResponse */
struct delegation__getInterfaceVersionResponse
{
public:
	std::string getInterfaceVersionReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts3_delegation__getInterfaceVersion
#define SOAP_TYPE_fts3_delegation__getInterfaceVersion (94)
/* delegation:getInterfaceVersion */
struct delegation__getInterfaceVersion
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_fts3_delegation__getServiceMetadataResponse
#define SOAP_TYPE_fts3_delegation__getServiceMetadataResponse (95)
/* delegation:getServiceMetadataResponse */
struct delegation__getServiceMetadataResponse
{
public:
	std::string _getServiceMetadataReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts3_delegation__getServiceMetadata
#define SOAP_TYPE_fts3_delegation__getServiceMetadata (98)
/* delegation:getServiceMetadata */
struct delegation__getServiceMetadata
{
public:
	std::string _key;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts3_delegation__getProxyReqResponse
#define SOAP_TYPE_fts3_delegation__getProxyReqResponse (99)
/* delegation:getProxyReqResponse */
struct delegation__getProxyReqResponse
{
public:
	std::string _getProxyReqReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts3_delegation__getProxyReq
#define SOAP_TYPE_fts3_delegation__getProxyReq (102)
/* delegation:getProxyReq */
struct delegation__getProxyReq
{
public:
	std::string _delegationID;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts3_delegation__getNewProxyReqResponse
#define SOAP_TYPE_fts3_delegation__getNewProxyReqResponse (103)
/* delegation:getNewProxyReqResponse */
struct delegation__getNewProxyReqResponse
{
public:
	delegation__NewProxyReq *getNewProxyReqReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type delegation:NewProxyReq */
};
#endif

#ifndef SOAP_TYPE_fts3_delegation__getNewProxyReq
#define SOAP_TYPE_fts3_delegation__getNewProxyReq (107)
/* delegation:getNewProxyReq */
struct delegation__getNewProxyReq
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_fts3_delegation__renewProxyReqResponse
#define SOAP_TYPE_fts3_delegation__renewProxyReqResponse (108)
/* delegation:renewProxyReqResponse */
struct delegation__renewProxyReqResponse
{
public:
	std::string _renewProxyReqReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts3_delegation__renewProxyReq
#define SOAP_TYPE_fts3_delegation__renewProxyReq (111)
/* delegation:renewProxyReq */
struct delegation__renewProxyReq
{
public:
	std::string _delegationID;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts3_delegation__putProxyResponse
#define SOAP_TYPE_fts3_delegation__putProxyResponse (112)
/* delegation:putProxyResponse */
struct delegation__putProxyResponse
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_fts3_delegation__putProxy
#define SOAP_TYPE_fts3_delegation__putProxy (115)
/* delegation:putProxy */
struct delegation__putProxy
{
public:
	std::string _delegationID;	/* required element of type xsd:string */
	std::string _proxy;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts3_delegation__getTerminationTimeResponse
#define SOAP_TYPE_fts3_delegation__getTerminationTimeResponse (116)
/* delegation:getTerminationTimeResponse */
struct delegation__getTerminationTimeResponse
{
public:
	time_t _getTerminationTimeReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:dateTime */
};
#endif

#ifndef SOAP_TYPE_fts3_delegation__getTerminationTime
#define SOAP_TYPE_fts3_delegation__getTerminationTime (120)
/* delegation:getTerminationTime */
struct delegation__getTerminationTime
{
public:
	std::string _delegationID;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts3_delegation__destroyResponse
#define SOAP_TYPE_fts3_delegation__destroyResponse (121)
/* delegation:destroyResponse */
struct delegation__destroyResponse
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_fts3_delegation__destroy
#define SOAP_TYPE_fts3_delegation__destroy (124)
/* delegation:destroy */
struct delegation__destroy
{
public:
	std::string _delegationID;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts3_implcfg__setConfigurationResponse
#define SOAP_TYPE_fts3_implcfg__setConfigurationResponse (125)
/* implcfg:setConfigurationResponse */
struct implcfg__setConfigurationResponse
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_fts3_implcfg__setConfiguration
#define SOAP_TYPE_fts3_implcfg__setConfiguration (129)
/* implcfg:setConfiguration */
struct implcfg__setConfiguration
{
public:
	config__Configuration *_configuration;	/* optional element of type config:Configuration */
};
#endif

#ifndef SOAP_TYPE_fts3_implcfg__delConfigurationResponse
#define SOAP_TYPE_fts3_implcfg__delConfigurationResponse (130)
/* implcfg:delConfigurationResponse */
struct implcfg__delConfigurationResponse
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_fts3_implcfg__delConfiguration
#define SOAP_TYPE_fts3_implcfg__delConfiguration (133)
/* implcfg:delConfiguration */
struct implcfg__delConfiguration
{
public:
	config__Configuration *_configuration;	/* optional element of type config:Configuration */
};
#endif

#ifndef SOAP_TYPE_fts3_implcfg__getConfigurationResponse
#define SOAP_TYPE_fts3_implcfg__getConfigurationResponse (134)
/* implcfg:getConfigurationResponse */
struct implcfg__getConfigurationResponse
{
public:
	config__Configuration *configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type config:Configuration */
};
#endif

#ifndef SOAP_TYPE_fts3_implcfg__getConfiguration
#define SOAP_TYPE_fts3_implcfg__getConfiguration (137)
/* implcfg:getConfiguration */
struct implcfg__getConfiguration
{
public:
	std::string vo;	/* required element of type xsd:string */
	std::string name;	/* required element of type xsd:string */
	std::string source;	/* required element of type xsd:string */
	std::string destination;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts3_implcfg__doDrainResponse
#define SOAP_TYPE_fts3_implcfg__doDrainResponse (138)
/* implcfg:doDrainResponse */
struct implcfg__doDrainResponse
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_fts3_implcfg__doDrain
#define SOAP_TYPE_fts3_implcfg__doDrain (142)
/* implcfg:doDrain */
struct implcfg__doDrain
{
public:
	bool drain;	/* required element of type xsd:boolean */
};
#endif

#ifndef SOAP_TYPE_fts3_implcfg__setRetryResponse
#define SOAP_TYPE_fts3_implcfg__setRetryResponse (143)
/* implcfg:setRetryResponse */
struct implcfg__setRetryResponse
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_fts3_implcfg__setRetry
#define SOAP_TYPE_fts3_implcfg__setRetry (146)
/* implcfg:setRetry */
struct implcfg__setRetry
{
public:
	int retry;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_fts3_implcfg__setQueueTimeoutResponse
#define SOAP_TYPE_fts3_implcfg__setQueueTimeoutResponse (147)
/* implcfg:setQueueTimeoutResponse */
struct implcfg__setQueueTimeoutResponse
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_fts3_implcfg__setQueueTimeout
#define SOAP_TYPE_fts3_implcfg__setQueueTimeout (150)
/* implcfg:setQueueTimeout */
struct implcfg__setQueueTimeout
{
public:
	unsigned int timeout;	/* required element of type xsd:unsignedInt */
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__transferSubmitResponse
#define SOAP_TYPE_fts3_impltns__transferSubmitResponse (151)
/* impltns:transferSubmitResponse */
struct impltns__transferSubmitResponse
{
public:
	std::string _transferSubmitReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__transferSubmit
#define SOAP_TYPE_fts3_impltns__transferSubmit (155)
/* impltns:transferSubmit */
struct impltns__transferSubmit
{
public:
	tns3__TransferJob *_job;	/* optional element of type tns3:TransferJob */
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__transferSubmit2Response
#define SOAP_TYPE_fts3_impltns__transferSubmit2Response (156)
/* impltns:transferSubmit2Response */
struct impltns__transferSubmit2Response
{
public:
	std::string _transferSubmit2Return;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__transferSubmit2
#define SOAP_TYPE_fts3_impltns__transferSubmit2 (159)
/* impltns:transferSubmit2 */
struct impltns__transferSubmit2
{
public:
	tns3__TransferJob *_job;	/* optional element of type tns3:TransferJob */
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__transferSubmit3Response
#define SOAP_TYPE_fts3_impltns__transferSubmit3Response (160)
/* impltns:transferSubmit3Response */
struct impltns__transferSubmit3Response
{
public:
	std::string _transferSubmit3Return;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__transferSubmit3
#define SOAP_TYPE_fts3_impltns__transferSubmit3 (164)
/* impltns:transferSubmit3 */
struct impltns__transferSubmit3
{
public:
	tns3__TransferJob2 *_job;	/* optional element of type tns3:TransferJob2 */
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__transferSubmit4Response
#define SOAP_TYPE_fts3_impltns__transferSubmit4Response (165)
/* impltns:transferSubmit4Response */
struct impltns__transferSubmit4Response
{
public:
	std::string _transferSubmit4Return;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__transferSubmit4
#define SOAP_TYPE_fts3_impltns__transferSubmit4 (169)
/* impltns:transferSubmit4 */
struct impltns__transferSubmit4
{
public:
	tns3__TransferJob3 *_job;	/* optional element of type tns3:TransferJob3 */
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__prioritySetResponse
#define SOAP_TYPE_fts3_impltns__prioritySetResponse (170)
/* impltns:prioritySetResponse */
struct impltns__prioritySetResponse
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__prioritySet
#define SOAP_TYPE_fts3_impltns__prioritySet (173)
/* impltns:prioritySet */
struct impltns__prioritySet
{
public:
	std::string _jobId;	/* required element of type xsd:string */
	int _priority;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__debugSetResponse
#define SOAP_TYPE_fts3_impltns__debugSetResponse (174)
/* impltns:debugSetResponse */
struct impltns__debugSetResponse
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__debugSet
#define SOAP_TYPE_fts3_impltns__debugSet (177)
/* impltns:debugSet */
struct impltns__debugSet
{
public:
	std::string _source;	/* required element of type xsd:string */
	std::string _destination;	/* required element of type xsd:string */
	bool _debug;	/* required element of type xsd:boolean */
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__blacklistResponse
#define SOAP_TYPE_fts3_impltns__blacklistResponse (178)
/* impltns:blacklistResponse */
struct impltns__blacklistResponse
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__blacklist
#define SOAP_TYPE_fts3_impltns__blacklist (181)
/* impltns:blacklist */
struct impltns__blacklist
{
public:
	std::string _type;	/* required element of type xsd:string */
	std::string _subject;	/* required element of type xsd:string */
	bool _blk;	/* required element of type xsd:boolean */
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__listRequestsResponse
#define SOAP_TYPE_fts3_impltns__listRequestsResponse (182)
/* impltns:listRequestsResponse */
struct impltns__listRequestsResponse
{
public:
	impltns__ArrayOf_USCOREtns3_USCOREJobStatus *_listRequestsReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type impltns:ArrayOf_tns3_JobStatus */
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__listRequests
#define SOAP_TYPE_fts3_impltns__listRequests (187)
/* impltns:listRequests */
struct impltns__listRequests
{
public:
	impltns__ArrayOf_USCOREsoapenc_USCOREstring *_inGivenStates;	/* optional element of type impltns:ArrayOf_soapenc_string */
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__listRequests2Response
#define SOAP_TYPE_fts3_impltns__listRequests2Response (188)
/* impltns:listRequests2Response */
struct impltns__listRequests2Response
{
public:
	impltns__ArrayOf_USCOREtns3_USCOREJobStatus *_listRequests2Return;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type impltns:ArrayOf_tns3_JobStatus */
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__listRequests2
#define SOAP_TYPE_fts3_impltns__listRequests2 (191)
/* impltns:listRequests2 */
struct impltns__listRequests2
{
public:
	impltns__ArrayOf_USCOREsoapenc_USCOREstring *_inGivenStates;	/* optional element of type impltns:ArrayOf_soapenc_string */
	std::string _forDN;	/* required element of type xsd:string */
	std::string _forVO;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__getFileStatusResponse
#define SOAP_TYPE_fts3_impltns__getFileStatusResponse (192)
/* impltns:getFileStatusResponse */
struct impltns__getFileStatusResponse
{
public:
	impltns__ArrayOf_USCOREtns3_USCOREFileTransferStatus *_getFileStatusReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type impltns:ArrayOf_tns3_FileTransferStatus */
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__getFileStatus
#define SOAP_TYPE_fts3_impltns__getFileStatus (196)
/* impltns:getFileStatus */
struct impltns__getFileStatus
{
public:
	std::string _requestID;	/* required element of type xsd:string */
	int _offset;	/* required element of type xsd:int */
	int _limit;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__getFileStatus2Response
#define SOAP_TYPE_fts3_impltns__getFileStatus2Response (197)
/* impltns:getFileStatus2Response */
struct impltns__getFileStatus2Response
{
public:
	impltns__ArrayOf_USCOREtns3_USCOREFileTransferStatus2 *_getFileStatus2Return;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type impltns:ArrayOf_tns3_FileTransferStatus2 */
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__getFileStatus2
#define SOAP_TYPE_fts3_impltns__getFileStatus2 (201)
/* impltns:getFileStatus2 */
struct impltns__getFileStatus2
{
public:
	std::string _requestID;	/* required element of type xsd:string */
	int _offset;	/* required element of type xsd:int */
	int _limit;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__getTransferJobStatusResponse
#define SOAP_TYPE_fts3_impltns__getTransferJobStatusResponse (202)
/* impltns:getTransferJobStatusResponse */
struct impltns__getTransferJobStatusResponse
{
public:
	tns3__JobStatus *_getTransferJobStatusReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tns3:JobStatus */
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__getTransferJobStatus
#define SOAP_TYPE_fts3_impltns__getTransferJobStatus (205)
/* impltns:getTransferJobStatus */
struct impltns__getTransferJobStatus
{
public:
	std::string _requestID;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__getTransferJobSummaryResponse
#define SOAP_TYPE_fts3_impltns__getTransferJobSummaryResponse (206)
/* impltns:getTransferJobSummaryResponse */
struct impltns__getTransferJobSummaryResponse
{
public:
	tns3__TransferJobSummary *_getTransferJobSummaryReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tns3:TransferJobSummary */
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__getTransferJobSummary
#define SOAP_TYPE_fts3_impltns__getTransferJobSummary (210)
/* impltns:getTransferJobSummary */
struct impltns__getTransferJobSummary
{
public:
	std::string _requestID;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__getTransferJobSummary2Response
#define SOAP_TYPE_fts3_impltns__getTransferJobSummary2Response (211)
/* impltns:getTransferJobSummary2Response */
struct impltns__getTransferJobSummary2Response
{
public:
	tns3__TransferJobSummary2 *_getTransferJobSummary2Return;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tns3:TransferJobSummary2 */
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__getTransferJobSummary2
#define SOAP_TYPE_fts3_impltns__getTransferJobSummary2 (215)
/* impltns:getTransferJobSummary2 */
struct impltns__getTransferJobSummary2
{
public:
	std::string _requestID;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__cancelResponse
#define SOAP_TYPE_fts3_impltns__cancelResponse (216)
/* impltns:cancelResponse */
struct impltns__cancelResponse
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__cancel
#define SOAP_TYPE_fts3_impltns__cancel (219)
/* impltns:cancel */
struct impltns__cancel
{
public:
	impltns__ArrayOf_USCOREsoapenc_USCOREstring *_requestIDs;	/* optional element of type impltns:ArrayOf_soapenc_string */
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__setJobPriorityResponse
#define SOAP_TYPE_fts3_impltns__setJobPriorityResponse (220)
/* impltns:setJobPriorityResponse */
struct impltns__setJobPriorityResponse
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__setJobPriority
#define SOAP_TYPE_fts3_impltns__setJobPriority (223)
/* impltns:setJobPriority */
struct impltns__setJobPriority
{
public:
	std::string _requestID;	/* required element of type xsd:string */
	int _priority;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__addVOManagerResponse
#define SOAP_TYPE_fts3_impltns__addVOManagerResponse (224)
/* impltns:addVOManagerResponse */
struct impltns__addVOManagerResponse
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__addVOManager
#define SOAP_TYPE_fts3_impltns__addVOManager (227)
/* impltns:addVOManager */
struct impltns__addVOManager
{
public:
	std::string _VOName;	/* required element of type xsd:string */
	std::string _principal;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__removeVOManagerResponse
#define SOAP_TYPE_fts3_impltns__removeVOManagerResponse (228)
/* impltns:removeVOManagerResponse */
struct impltns__removeVOManagerResponse
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__removeVOManager
#define SOAP_TYPE_fts3_impltns__removeVOManager (231)
/* impltns:removeVOManager */
struct impltns__removeVOManager
{
public:
	std::string _VOName;	/* required element of type xsd:string */
	std::string _principal;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__listVOManagersResponse
#define SOAP_TYPE_fts3_impltns__listVOManagersResponse (232)
/* impltns:listVOManagersResponse */
struct impltns__listVOManagersResponse
{
public:
	impltns__ArrayOf_USCOREsoapenc_USCOREstring *_listVOManagersReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type impltns:ArrayOf_soapenc_string */
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__listVOManagers
#define SOAP_TYPE_fts3_impltns__listVOManagers (235)
/* impltns:listVOManagers */
struct impltns__listVOManagers
{
public:
	std::string _VOName;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__getRolesResponse
#define SOAP_TYPE_fts3_impltns__getRolesResponse (236)
/* impltns:getRolesResponse */
struct impltns__getRolesResponse
{
public:
	tns3__Roles *getRolesReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tns3:Roles */
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__getRoles
#define SOAP_TYPE_fts3_impltns__getRoles (240)
/* impltns:getRoles */
struct impltns__getRoles
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__getRolesOfResponse
#define SOAP_TYPE_fts3_impltns__getRolesOfResponse (241)
/* impltns:getRolesOfResponse */
struct impltns__getRolesOfResponse
{
public:
	tns3__Roles *_getRolesOfReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tns3:Roles */
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__getRolesOf
#define SOAP_TYPE_fts3_impltns__getRolesOf (244)
/* impltns:getRolesOf */
struct impltns__getRolesOf
{
public:
	std::string _otherDN;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__getVersionResponse
#define SOAP_TYPE_fts3_impltns__getVersionResponse (245)
/* impltns:getVersionResponse */
struct impltns__getVersionResponse
{
public:
	std::string getVersionReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__getVersion
#define SOAP_TYPE_fts3_impltns__getVersion (248)
/* impltns:getVersion */
struct impltns__getVersion
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__getSchemaVersionResponse
#define SOAP_TYPE_fts3_impltns__getSchemaVersionResponse (249)
/* impltns:getSchemaVersionResponse */
struct impltns__getSchemaVersionResponse
{
public:
	std::string getSchemaVersionReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__getSchemaVersion
#define SOAP_TYPE_fts3_impltns__getSchemaVersion (252)
/* impltns:getSchemaVersion */
struct impltns__getSchemaVersion
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__getInterfaceVersionResponse
#define SOAP_TYPE_fts3_impltns__getInterfaceVersionResponse (253)
/* impltns:getInterfaceVersionResponse */
struct impltns__getInterfaceVersionResponse
{
public:
	std::string getInterfaceVersionReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__getInterfaceVersion
#define SOAP_TYPE_fts3_impltns__getInterfaceVersion (256)
/* impltns:getInterfaceVersion */
struct impltns__getInterfaceVersion
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__getServiceMetadataResponse
#define SOAP_TYPE_fts3_impltns__getServiceMetadataResponse (257)
/* impltns:getServiceMetadataResponse */
struct impltns__getServiceMetadataResponse
{
public:
	std::string _getServiceMetadataReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts3_impltns__getServiceMetadata
#define SOAP_TYPE_fts3_impltns__getServiceMetadata (260)
/* impltns:getServiceMetadata */
struct impltns__getServiceMetadata
{
public:
	std::string _key;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts3_log__GetLogResponse
#define SOAP_TYPE_fts3_log__GetLogResponse (261)
/* log:GetLogResponse */
struct log__GetLogResponse
{
public:
	log__Log *log;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type log:Log */
};
#endif

#ifndef SOAP_TYPE_fts3_log__GetLog
#define SOAP_TYPE_fts3_log__GetLog (264)
/* log:GetLog */
struct log__GetLog
{
public:
	std::string jobId;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts3_log__GetLogInternalResponse
#define SOAP_TYPE_fts3_log__GetLogInternalResponse (265)
/* log:GetLogInternalResponse */
struct log__GetLogInternalResponse
{
public:
	log__LogInternal *logs;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type log:LogInternal */
};
#endif

#ifndef SOAP_TYPE_fts3_log__GetLogInternal
#define SOAP_TYPE_fts3_log__GetLogInternal (269)
/* log:GetLogInternal */
struct log__GetLogInternal
{
public:
	std::string jobId;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts3_SOAP_ENV__Header
#define SOAP_TYPE_fts3_SOAP_ENV__Header (270)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_fts3_SOAP_ENV__Code
#define SOAP_TYPE_fts3_SOAP_ENV__Code (271)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_fts3_SOAP_ENV__Reason
#define SOAP_TYPE_fts3_SOAP_ENV__Reason (273)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts3_SOAP_ENV__Fault
#define SOAP_TYPE_fts3_SOAP_ENV__Fault (274)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE_fts3__QName
#define SOAP_TYPE_fts3__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE_fts3__XML
#define SOAP_TYPE_fts3__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Server-Side Operations                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 delegation__getVersion(struct soap*, struct delegation__getVersionResponse &_param_1);

SOAP_FMAC5 int SOAP_FMAC6 delegation__getInterfaceVersion(struct soap*, struct delegation__getInterfaceVersionResponse &_param_2);

SOAP_FMAC5 int SOAP_FMAC6 delegation__getServiceMetadata(struct soap*, std::string _key, struct delegation__getServiceMetadataResponse &_param_3);

SOAP_FMAC5 int SOAP_FMAC6 delegation__getProxyReq(struct soap*, std::string _delegationID, struct delegation__getProxyReqResponse &_param_4);

SOAP_FMAC5 int SOAP_FMAC6 delegation__getNewProxyReq(struct soap*, struct delegation__getNewProxyReqResponse &_param_5);

SOAP_FMAC5 int SOAP_FMAC6 delegation__renewProxyReq(struct soap*, std::string _delegationID, struct delegation__renewProxyReqResponse &_param_6);

SOAP_FMAC5 int SOAP_FMAC6 delegation__putProxy(struct soap*, std::string _delegationID, std::string _proxy, struct delegation__putProxyResponse &_param_7);

SOAP_FMAC5 int SOAP_FMAC6 delegation__getTerminationTime(struct soap*, std::string _delegationID, struct delegation__getTerminationTimeResponse &_param_8);

SOAP_FMAC5 int SOAP_FMAC6 delegation__destroy(struct soap*, std::string _delegationID, struct delegation__destroyResponse &_param_9);

SOAP_FMAC5 int SOAP_FMAC6 implcfg__setConfiguration(struct soap*, config__Configuration *_configuration, struct implcfg__setConfigurationResponse &_param_10);

SOAP_FMAC5 int SOAP_FMAC6 implcfg__delConfiguration(struct soap*, config__Configuration *_configuration, struct implcfg__delConfigurationResponse &_param_11);

SOAP_FMAC5 int SOAP_FMAC6 implcfg__getConfiguration(struct soap*, std::string vo, std::string name, std::string source, std::string destination, struct implcfg__getConfigurationResponse &_param_12);

SOAP_FMAC5 int SOAP_FMAC6 implcfg__doDrain(struct soap*, bool drain, struct implcfg__doDrainResponse &_param_13);

SOAP_FMAC5 int SOAP_FMAC6 implcfg__setRetry(struct soap*, int retry, struct implcfg__setRetryResponse &_param_14);

SOAP_FMAC5 int SOAP_FMAC6 implcfg__setQueueTimeout(struct soap*, unsigned int timeout, struct implcfg__setQueueTimeoutResponse &_param_15);

SOAP_FMAC5 int SOAP_FMAC6 impltns__transferSubmit(struct soap*, tns3__TransferJob *_job, struct impltns__transferSubmitResponse &_param_16);

SOAP_FMAC5 int SOAP_FMAC6 impltns__transferSubmit2(struct soap*, tns3__TransferJob *_job, struct impltns__transferSubmit2Response &_param_17);

SOAP_FMAC5 int SOAP_FMAC6 impltns__transferSubmit3(struct soap*, tns3__TransferJob2 *_job, struct impltns__transferSubmit3Response &_param_18);

SOAP_FMAC5 int SOAP_FMAC6 impltns__transferSubmit4(struct soap*, tns3__TransferJob3 *_job, struct impltns__transferSubmit4Response &_param_19);

SOAP_FMAC5 int SOAP_FMAC6 impltns__prioritySet(struct soap*, std::string _jobId, int _priority, struct impltns__prioritySetResponse &_param_20);

SOAP_FMAC5 int SOAP_FMAC6 impltns__debugSet(struct soap*, std::string _source, std::string _destination, bool _debug, struct impltns__debugSetResponse &_param_21);

SOAP_FMAC5 int SOAP_FMAC6 impltns__blacklist(struct soap*, std::string _type, std::string _subject, bool _blk, struct impltns__blacklistResponse &_param_22);

SOAP_FMAC5 int SOAP_FMAC6 impltns__listRequests(struct soap*, impltns__ArrayOf_USCOREsoapenc_USCOREstring *_inGivenStates, struct impltns__listRequestsResponse &_param_23);

SOAP_FMAC5 int SOAP_FMAC6 impltns__listRequests2(struct soap*, impltns__ArrayOf_USCOREsoapenc_USCOREstring *_inGivenStates, std::string _forDN, std::string _forVO, struct impltns__listRequests2Response &_param_24);

SOAP_FMAC5 int SOAP_FMAC6 impltns__getFileStatus(struct soap*, std::string _requestID, int _offset, int _limit, struct impltns__getFileStatusResponse &_param_25);

SOAP_FMAC5 int SOAP_FMAC6 impltns__getFileStatus2(struct soap*, std::string _requestID, int _offset, int _limit, struct impltns__getFileStatus2Response &_param_26);

SOAP_FMAC5 int SOAP_FMAC6 impltns__getTransferJobStatus(struct soap*, std::string _requestID, struct impltns__getTransferJobStatusResponse &_param_27);

SOAP_FMAC5 int SOAP_FMAC6 impltns__getTransferJobSummary(struct soap*, std::string _requestID, struct impltns__getTransferJobSummaryResponse &_param_28);

SOAP_FMAC5 int SOAP_FMAC6 impltns__getTransferJobSummary2(struct soap*, std::string _requestID, struct impltns__getTransferJobSummary2Response &_param_29);

SOAP_FMAC5 int SOAP_FMAC6 impltns__cancel(struct soap*, impltns__ArrayOf_USCOREsoapenc_USCOREstring *_requestIDs, struct impltns__cancelResponse &_param_30);

SOAP_FMAC5 int SOAP_FMAC6 impltns__setJobPriority(struct soap*, std::string _requestID, int _priority, struct impltns__setJobPriorityResponse &_param_31);

SOAP_FMAC5 int SOAP_FMAC6 impltns__addVOManager(struct soap*, std::string _VOName, std::string _principal, struct impltns__addVOManagerResponse &_param_32);

SOAP_FMAC5 int SOAP_FMAC6 impltns__removeVOManager(struct soap*, std::string _VOName, std::string _principal, struct impltns__removeVOManagerResponse &_param_33);

SOAP_FMAC5 int SOAP_FMAC6 impltns__listVOManagers(struct soap*, std::string _VOName, struct impltns__listVOManagersResponse &_param_34);

SOAP_FMAC5 int SOAP_FMAC6 impltns__getRoles(struct soap*, struct impltns__getRolesResponse &_param_35);

SOAP_FMAC5 int SOAP_FMAC6 impltns__getRolesOf(struct soap*, std::string _otherDN, struct impltns__getRolesOfResponse &_param_36);

SOAP_FMAC5 int SOAP_FMAC6 impltns__getVersion(struct soap*, struct impltns__getVersionResponse &_param_37);

SOAP_FMAC5 int SOAP_FMAC6 impltns__getSchemaVersion(struct soap*, struct impltns__getSchemaVersionResponse &_param_38);

SOAP_FMAC5 int SOAP_FMAC6 impltns__getInterfaceVersion(struct soap*, struct impltns__getInterfaceVersionResponse &_param_39);

SOAP_FMAC5 int SOAP_FMAC6 impltns__getServiceMetadata(struct soap*, std::string _key, struct impltns__getServiceMetadataResponse &_param_40);

SOAP_FMAC5 int SOAP_FMAC6 log__GetLog(struct soap*, std::string jobId, struct log__GetLogResponse &_param_41);

SOAP_FMAC5 int SOAP_FMAC6 log__GetLogInternal(struct soap*, std::string jobId, struct log__GetLogInternalResponse &_param_42);

/******************************************************************************\
 *                                                                            *
 * Server-Side Skeletons to Invoke Service Operations                         *
 *                                                                            *
\******************************************************************************/

SOAP_FMAC5 int SOAP_FMAC6 fts3_serve(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 fts3_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_delegation__getVersion(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_delegation__getInterfaceVersion(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_delegation__getServiceMetadata(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_delegation__getProxyReq(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_delegation__getNewProxyReq(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_delegation__renewProxyReq(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_delegation__putProxy(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_delegation__getTerminationTime(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_delegation__destroy(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_implcfg__setConfiguration(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_implcfg__delConfiguration(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_implcfg__getConfiguration(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_implcfg__doDrain(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_implcfg__setRetry(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_implcfg__setQueueTimeout(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_impltns__transferSubmit(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_impltns__transferSubmit2(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_impltns__transferSubmit3(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_impltns__transferSubmit4(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_impltns__prioritySet(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_impltns__debugSet(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_impltns__blacklist(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_impltns__listRequests(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_impltns__listRequests2(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_impltns__getFileStatus(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_impltns__getFileStatus2(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_impltns__getTransferJobStatus(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_impltns__getTransferJobSummary(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_impltns__getTransferJobSummary2(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_impltns__cancel(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_impltns__setJobPriority(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_impltns__addVOManager(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_impltns__removeVOManager(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_impltns__listVOManagers(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_impltns__getRoles(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_impltns__getRolesOf(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_impltns__getVersion(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_impltns__getSchemaVersion(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_impltns__getInterfaceVersion(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_impltns__getServiceMetadata(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_log__GetLog(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_log__GetLogInternal(struct soap*);

/******************************************************************************\
 *                                                                            *
 * Client-Side Call Stubs                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegation__getVersion(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct delegation__getVersionResponse &_param_1);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegation__getInterfaceVersion(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct delegation__getInterfaceVersionResponse &_param_2);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegation__getServiceMetadata(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _key, struct delegation__getServiceMetadataResponse &_param_3);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegation__getProxyReq(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _delegationID, struct delegation__getProxyReqResponse &_param_4);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegation__getNewProxyReq(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct delegation__getNewProxyReqResponse &_param_5);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegation__renewProxyReq(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _delegationID, struct delegation__renewProxyReqResponse &_param_6);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegation__putProxy(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _delegationID, std::string _proxy, struct delegation__putProxyResponse &_param_7);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegation__getTerminationTime(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _delegationID, struct delegation__getTerminationTimeResponse &_param_8);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegation__destroy(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _delegationID, struct delegation__destroyResponse &_param_9);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_implcfg__setConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, config__Configuration *_configuration, struct implcfg__setConfigurationResponse &_param_10);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_implcfg__delConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, config__Configuration *_configuration, struct implcfg__delConfigurationResponse &_param_11);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_implcfg__getConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string vo, std::string name, std::string source, std::string destination, struct implcfg__getConfigurationResponse &_param_12);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_implcfg__doDrain(struct soap *soap, const char *soap_endpoint, const char *soap_action, bool drain, struct implcfg__doDrainResponse &_param_13);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_implcfg__setRetry(struct soap *soap, const char *soap_endpoint, const char *soap_action, int retry, struct implcfg__setRetryResponse &_param_14);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_implcfg__setQueueTimeout(struct soap *soap, const char *soap_endpoint, const char *soap_action, unsigned int timeout, struct implcfg__setQueueTimeoutResponse &_param_15);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__transferSubmit(struct soap *soap, const char *soap_endpoint, const char *soap_action, tns3__TransferJob *_job, struct impltns__transferSubmitResponse &_param_16);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__transferSubmit2(struct soap *soap, const char *soap_endpoint, const char *soap_action, tns3__TransferJob *_job, struct impltns__transferSubmit2Response &_param_17);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__transferSubmit3(struct soap *soap, const char *soap_endpoint, const char *soap_action, tns3__TransferJob2 *_job, struct impltns__transferSubmit3Response &_param_18);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__transferSubmit4(struct soap *soap, const char *soap_endpoint, const char *soap_action, tns3__TransferJob3 *_job, struct impltns__transferSubmit4Response &_param_19);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__prioritySet(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _jobId, int _priority, struct impltns__prioritySetResponse &_param_20);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__debugSet(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _source, std::string _destination, bool _debug, struct impltns__debugSetResponse &_param_21);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__blacklist(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _type, std::string _subject, bool _blk, struct impltns__blacklistResponse &_param_22);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__listRequests(struct soap *soap, const char *soap_endpoint, const char *soap_action, impltns__ArrayOf_USCOREsoapenc_USCOREstring *_inGivenStates, struct impltns__listRequestsResponse &_param_23);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__listRequests2(struct soap *soap, const char *soap_endpoint, const char *soap_action, impltns__ArrayOf_USCOREsoapenc_USCOREstring *_inGivenStates, std::string _forDN, std::string _forVO, struct impltns__listRequests2Response &_param_24);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__getFileStatus(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _requestID, int _offset, int _limit, struct impltns__getFileStatusResponse &_param_25);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__getFileStatus2(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _requestID, int _offset, int _limit, struct impltns__getFileStatus2Response &_param_26);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__getTransferJobStatus(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _requestID, struct impltns__getTransferJobStatusResponse &_param_27);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__getTransferJobSummary(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _requestID, struct impltns__getTransferJobSummaryResponse &_param_28);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__getTransferJobSummary2(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _requestID, struct impltns__getTransferJobSummary2Response &_param_29);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__cancel(struct soap *soap, const char *soap_endpoint, const char *soap_action, impltns__ArrayOf_USCOREsoapenc_USCOREstring *_requestIDs, struct impltns__cancelResponse &_param_30);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__setJobPriority(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _requestID, int _priority, struct impltns__setJobPriorityResponse &_param_31);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__addVOManager(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _VOName, std::string _principal, struct impltns__addVOManagerResponse &_param_32);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__removeVOManager(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _VOName, std::string _principal, struct impltns__removeVOManagerResponse &_param_33);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__listVOManagers(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _VOName, struct impltns__listVOManagersResponse &_param_34);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__getRoles(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct impltns__getRolesResponse &_param_35);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__getRolesOf(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _otherDN, struct impltns__getRolesOfResponse &_param_36);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__getVersion(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct impltns__getVersionResponse &_param_37);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__getSchemaVersion(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct impltns__getSchemaVersionResponse &_param_38);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__getInterfaceVersion(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct impltns__getInterfaceVersionResponse &_param_39);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__getServiceMetadata(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _key, struct impltns__getServiceMetadataResponse &_param_40);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_log__GetLog(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string jobId, struct log__GetLogResponse &_param_41);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_log__GetLogInternal(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string jobId, struct log__GetLogInternalResponse &_param_42);

} // namespace fts3


#endif

/* End of fts3Stub.h */
