/* delegationClient.cpp
   Generated by gSOAP 2.7.16 from /home/simonm/tmp/build/src/ws-ifce/gsoap/delegation_interface.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "delegationH.h"

SOAP_SOURCE_STAMP("@(#) delegationClient.cpp ver 2.7.16 2012-06-22 11:35:11 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegation__getVersion(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct delegation__getVersionResponse &_param_1)
{	struct delegation__getVersion soap_tmp_delegation__getVersion;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-security-delegation";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_delegation__getVersion(soap, &soap_tmp_delegation__getVersion);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_delegation__getVersion(soap, &soap_tmp_delegation__getVersion, "delegation:getVersion", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_delegation__getVersion(soap, &soap_tmp_delegation__getVersion, "delegation:getVersion", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_1)
		return soap_closesock(soap);
	soap_default_delegation__getVersionResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_delegation__getVersionResponse(soap, &_param_1, "delegation:getVersionResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegation__getInterfaceVersion(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct delegation__getInterfaceVersionResponse &_param_2)
{	struct delegation__getInterfaceVersion soap_tmp_delegation__getInterfaceVersion;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-security-delegation";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_delegation__getInterfaceVersion(soap, &soap_tmp_delegation__getInterfaceVersion);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_delegation__getInterfaceVersion(soap, &soap_tmp_delegation__getInterfaceVersion, "delegation:getInterfaceVersion", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_delegation__getInterfaceVersion(soap, &soap_tmp_delegation__getInterfaceVersion, "delegation:getInterfaceVersion", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_2)
		return soap_closesock(soap);
	soap_default_delegation__getInterfaceVersionResponse(soap, &_param_2);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_delegation__getInterfaceVersionResponse(soap, &_param_2, "delegation:getInterfaceVersionResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegation__getServiceMetadata(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _key, struct delegation__getServiceMetadataResponse &_param_3)
{	struct delegation__getServiceMetadata soap_tmp_delegation__getServiceMetadata;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-security-delegation";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_delegation__getServiceMetadata._key = _key;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_delegation__getServiceMetadata(soap, &soap_tmp_delegation__getServiceMetadata);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_delegation__getServiceMetadata(soap, &soap_tmp_delegation__getServiceMetadata, "delegation:getServiceMetadata", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_delegation__getServiceMetadata(soap, &soap_tmp_delegation__getServiceMetadata, "delegation:getServiceMetadata", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_3)
		return soap_closesock(soap);
	soap_default_delegation__getServiceMetadataResponse(soap, &_param_3);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_delegation__getServiceMetadataResponse(soap, &_param_3, "delegation:getServiceMetadataResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegation__getProxyReq(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _delegationID, struct delegation__getProxyReqResponse &_param_4)
{	struct delegation__getProxyReq soap_tmp_delegation__getProxyReq;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-security-delegation";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_delegation__getProxyReq._delegationID = _delegationID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_delegation__getProxyReq(soap, &soap_tmp_delegation__getProxyReq);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_delegation__getProxyReq(soap, &soap_tmp_delegation__getProxyReq, "delegation:getProxyReq", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_delegation__getProxyReq(soap, &soap_tmp_delegation__getProxyReq, "delegation:getProxyReq", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_4)
		return soap_closesock(soap);
	soap_default_delegation__getProxyReqResponse(soap, &_param_4);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_delegation__getProxyReqResponse(soap, &_param_4, "delegation:getProxyReqResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegation__getNewProxyReq(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct delegation__getNewProxyReqResponse &_param_5)
{	struct delegation__getNewProxyReq soap_tmp_delegation__getNewProxyReq;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-security-delegation";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_delegation__getNewProxyReq(soap, &soap_tmp_delegation__getNewProxyReq);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_delegation__getNewProxyReq(soap, &soap_tmp_delegation__getNewProxyReq, "delegation:getNewProxyReq", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_delegation__getNewProxyReq(soap, &soap_tmp_delegation__getNewProxyReq, "delegation:getNewProxyReq", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_5)
		return soap_closesock(soap);
	soap_default_delegation__getNewProxyReqResponse(soap, &_param_5);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_delegation__getNewProxyReqResponse(soap, &_param_5, "delegation:getNewProxyReqResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegation__renewProxyReq(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _delegationID, struct delegation__renewProxyReqResponse &_param_6)
{	struct delegation__renewProxyReq soap_tmp_delegation__renewProxyReq;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-security-delegation";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_delegation__renewProxyReq._delegationID = _delegationID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_delegation__renewProxyReq(soap, &soap_tmp_delegation__renewProxyReq);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_delegation__renewProxyReq(soap, &soap_tmp_delegation__renewProxyReq, "delegation:renewProxyReq", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_delegation__renewProxyReq(soap, &soap_tmp_delegation__renewProxyReq, "delegation:renewProxyReq", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_6)
		return soap_closesock(soap);
	soap_default_delegation__renewProxyReqResponse(soap, &_param_6);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_delegation__renewProxyReqResponse(soap, &_param_6, "delegation:renewProxyReqResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegation__putProxy(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _delegationID, std::string _proxy, struct delegation__putProxyResponse &_param_7)
{	struct delegation__putProxy soap_tmp_delegation__putProxy;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-security-delegation";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_delegation__putProxy._delegationID = _delegationID;
	soap_tmp_delegation__putProxy._proxy = _proxy;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_delegation__putProxy(soap, &soap_tmp_delegation__putProxy);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_delegation__putProxy(soap, &soap_tmp_delegation__putProxy, "delegation:putProxy", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_delegation__putProxy(soap, &soap_tmp_delegation__putProxy, "delegation:putProxy", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_7)
		return soap_closesock(soap);
	soap_default_delegation__putProxyResponse(soap, &_param_7);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_delegation__putProxyResponse(soap, &_param_7, "delegation:putProxyResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegation__getTerminationTime(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _delegationID, struct delegation__getTerminationTimeResponse &_param_8)
{	struct delegation__getTerminationTime soap_tmp_delegation__getTerminationTime;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-security-delegation";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_delegation__getTerminationTime._delegationID = _delegationID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_delegation__getTerminationTime(soap, &soap_tmp_delegation__getTerminationTime);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_delegation__getTerminationTime(soap, &soap_tmp_delegation__getTerminationTime, "delegation:getTerminationTime", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_delegation__getTerminationTime(soap, &soap_tmp_delegation__getTerminationTime, "delegation:getTerminationTime", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_8)
		return soap_closesock(soap);
	soap_default_delegation__getTerminationTimeResponse(soap, &_param_8);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_delegation__getTerminationTimeResponse(soap, &_param_8, "delegation:getTerminationTimeResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegation__destroy(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _delegationID, struct delegation__destroyResponse &_param_9)
{	struct delegation__destroy soap_tmp_delegation__destroy;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-security-delegation";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_delegation__destroy._delegationID = _delegationID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_delegation__destroy(soap, &soap_tmp_delegation__destroy);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_delegation__destroy(soap, &soap_tmp_delegation__destroy, "delegation:destroy", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_delegation__destroy(soap, &soap_tmp_delegation__destroy, "delegation:destroy", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_9)
		return soap_closesock(soap);
	soap_default_delegation__destroyResponse(soap, &_param_9);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_delegation__destroyResponse(soap, &_param_9, "delegation:destroyResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of delegationClient.cpp */
