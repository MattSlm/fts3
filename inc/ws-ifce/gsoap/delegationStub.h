/* delegationStub.h
   Generated by gSOAP 2.7.16 from /home/simonm/tmp/build/src/ws-ifce/gsoap/delegation_interface.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef delegationStub_H
#define delegationStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_delegation	"http://www.gridsite.org/namespaces/delegation-2"
#ifndef WITH_NONAMESPACES
#define WITH_NONAMESPACES
#endif
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not redeclare here */

#endif

#if 0 /* volatile type: do not redeclare here */

#endif

#ifndef SOAP_TYPE_delegation__NewProxyReq
#define SOAP_TYPE_delegation__NewProxyReq (8)
/* delegation:NewProxyReq */
class SOAP_CMAC delegation__NewProxyReq
{
public:
	std::string *proxyRequest;	/* optional element of type xsd:string */
	std::string *delegationID;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE_delegation__NewProxyReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         delegation__NewProxyReq(): proxyRequest(NULL), delegationID(NULL), soap(NULL) { delegation__NewProxyReq::soap_default(NULL); }
	virtual ~delegation__NewProxyReq() { }
};
#endif

#ifndef SOAP_TYPE__delegation__DelegationException
#define SOAP_TYPE__delegation__DelegationException (9)
/* delegation:DelegationException */
class SOAP_CMAC _delegation__DelegationException
{
public:
	std::string *msg;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique id SOAP_TYPE__delegation__DelegationException */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _delegation__DelegationException(): msg(NULL), soap(NULL) { _delegation__DelegationException::soap_default(NULL); }
	virtual ~_delegation__DelegationException() { }
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (13)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	_delegation__DelegationException *delegation__DelegationException;	/* optional element of type delegation:DelegationException */
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_delegation__getVersionResponse
#define SOAP_TYPE_delegation__getVersionResponse (17)
/* delegation:getVersionResponse */
struct delegation__getVersionResponse
{
public:
	std::string getVersionReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_delegation__getVersion
#define SOAP_TYPE_delegation__getVersion (20)
/* delegation:getVersion */
struct delegation__getVersion
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_delegation__getInterfaceVersionResponse
#define SOAP_TYPE_delegation__getInterfaceVersionResponse (21)
/* delegation:getInterfaceVersionResponse */
struct delegation__getInterfaceVersionResponse
{
public:
	std::string getInterfaceVersionReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_delegation__getInterfaceVersion
#define SOAP_TYPE_delegation__getInterfaceVersion (24)
/* delegation:getInterfaceVersion */
struct delegation__getInterfaceVersion
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_delegation__getServiceMetadataResponse
#define SOAP_TYPE_delegation__getServiceMetadataResponse (25)
/* delegation:getServiceMetadataResponse */
struct delegation__getServiceMetadataResponse
{
public:
	std::string _getServiceMetadataReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_delegation__getServiceMetadata
#define SOAP_TYPE_delegation__getServiceMetadata (28)
/* delegation:getServiceMetadata */
struct delegation__getServiceMetadata
{
public:
	std::string _key;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_delegation__getProxyReqResponse
#define SOAP_TYPE_delegation__getProxyReqResponse (29)
/* delegation:getProxyReqResponse */
struct delegation__getProxyReqResponse
{
public:
	std::string _getProxyReqReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_delegation__getProxyReq
#define SOAP_TYPE_delegation__getProxyReq (32)
/* delegation:getProxyReq */
struct delegation__getProxyReq
{
public:
	std::string _delegationID;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_delegation__getNewProxyReqResponse
#define SOAP_TYPE_delegation__getNewProxyReqResponse (33)
/* delegation:getNewProxyReqResponse */
struct delegation__getNewProxyReqResponse
{
public:
	delegation__NewProxyReq *getNewProxyReqReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type delegation:NewProxyReq */
};
#endif

#ifndef SOAP_TYPE_delegation__getNewProxyReq
#define SOAP_TYPE_delegation__getNewProxyReq (37)
/* delegation:getNewProxyReq */
struct delegation__getNewProxyReq
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_delegation__renewProxyReqResponse
#define SOAP_TYPE_delegation__renewProxyReqResponse (38)
/* delegation:renewProxyReqResponse */
struct delegation__renewProxyReqResponse
{
public:
	std::string _renewProxyReqReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_delegation__renewProxyReq
#define SOAP_TYPE_delegation__renewProxyReq (41)
/* delegation:renewProxyReq */
struct delegation__renewProxyReq
{
public:
	std::string _delegationID;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_delegation__putProxyResponse
#define SOAP_TYPE_delegation__putProxyResponse (42)
/* delegation:putProxyResponse */
struct delegation__putProxyResponse
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_delegation__putProxy
#define SOAP_TYPE_delegation__putProxy (45)
/* delegation:putProxy */
struct delegation__putProxy
{
public:
	std::string _delegationID;	/* required element of type xsd:string */
	std::string _proxy;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_delegation__getTerminationTimeResponse
#define SOAP_TYPE_delegation__getTerminationTimeResponse (46)
/* delegation:getTerminationTimeResponse */
struct delegation__getTerminationTimeResponse
{
public:
	time_t _getTerminationTimeReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:dateTime */
};
#endif

#ifndef SOAP_TYPE_delegation__getTerminationTime
#define SOAP_TYPE_delegation__getTerminationTime (50)
/* delegation:getTerminationTime */
struct delegation__getTerminationTime
{
public:
	std::string _delegationID;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_delegation__destroyResponse
#define SOAP_TYPE_delegation__destroyResponse (51)
/* delegation:destroyResponse */
struct delegation__destroyResponse
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_delegation__destroy
#define SOAP_TYPE_delegation__destroy (54)
/* delegation:destroy */
struct delegation__destroy
{
public:
	std::string _delegationID;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (55)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (56)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (58)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (59)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Client-Side Call Stubs                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegation__getVersion(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct delegation__getVersionResponse &_param_1);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegation__getInterfaceVersion(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct delegation__getInterfaceVersionResponse &_param_2);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegation__getServiceMetadata(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _key, struct delegation__getServiceMetadataResponse &_param_3);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegation__getProxyReq(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _delegationID, struct delegation__getProxyReqResponse &_param_4);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegation__getNewProxyReq(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct delegation__getNewProxyReqResponse &_param_5);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegation__renewProxyReq(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _delegationID, struct delegation__renewProxyReqResponse &_param_6);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegation__putProxy(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _delegationID, std::string _proxy, struct delegation__putProxyResponse &_param_7);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegation__getTerminationTime(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _delegationID, struct delegation__getTerminationTimeResponse &_param_8);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegation__destroy(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _delegationID, struct delegation__destroyResponse &_param_9);

#endif

/* End of delegationStub.h */
