/* fts3Client.cpp
   Generated by gSOAP 2.7.16 from /home/simonm/tmp/build/src/ws-ifce/gsoap/gsoap_interface.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "fts3H.h"

namespace fts3 {

SOAP_SOURCE_STAMP("@(#) fts3Client.cpp ver 2.7.16 2013-02-05 11:10:01 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegation__getVersion(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct delegation__getVersionResponse &_param_1)
{	struct delegation__getVersion soap_tmp_delegation__getVersion;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-security-delegation";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_delegation__getVersion(soap, &soap_tmp_delegation__getVersion);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_delegation__getVersion(soap, &soap_tmp_delegation__getVersion, "delegation:getVersion", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_delegation__getVersion(soap, &soap_tmp_delegation__getVersion, "delegation:getVersion", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_1)
		return soap_closesock(soap);
	soap_default_delegation__getVersionResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_delegation__getVersionResponse(soap, &_param_1, "delegation:getVersionResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegation__getInterfaceVersion(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct delegation__getInterfaceVersionResponse &_param_2)
{	struct delegation__getInterfaceVersion soap_tmp_delegation__getInterfaceVersion;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-security-delegation";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_delegation__getInterfaceVersion(soap, &soap_tmp_delegation__getInterfaceVersion);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_delegation__getInterfaceVersion(soap, &soap_tmp_delegation__getInterfaceVersion, "delegation:getInterfaceVersion", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_delegation__getInterfaceVersion(soap, &soap_tmp_delegation__getInterfaceVersion, "delegation:getInterfaceVersion", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_2)
		return soap_closesock(soap);
	soap_default_delegation__getInterfaceVersionResponse(soap, &_param_2);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_delegation__getInterfaceVersionResponse(soap, &_param_2, "delegation:getInterfaceVersionResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegation__getServiceMetadata(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _key, struct delegation__getServiceMetadataResponse &_param_3)
{	struct delegation__getServiceMetadata soap_tmp_delegation__getServiceMetadata;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-security-delegation";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_delegation__getServiceMetadata._key = _key;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_delegation__getServiceMetadata(soap, &soap_tmp_delegation__getServiceMetadata);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_delegation__getServiceMetadata(soap, &soap_tmp_delegation__getServiceMetadata, "delegation:getServiceMetadata", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_delegation__getServiceMetadata(soap, &soap_tmp_delegation__getServiceMetadata, "delegation:getServiceMetadata", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_3)
		return soap_closesock(soap);
	soap_default_delegation__getServiceMetadataResponse(soap, &_param_3);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_delegation__getServiceMetadataResponse(soap, &_param_3, "delegation:getServiceMetadataResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegation__getProxyReq(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _delegationID, struct delegation__getProxyReqResponse &_param_4)
{	struct delegation__getProxyReq soap_tmp_delegation__getProxyReq;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-security-delegation";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_delegation__getProxyReq._delegationID = _delegationID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_delegation__getProxyReq(soap, &soap_tmp_delegation__getProxyReq);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_delegation__getProxyReq(soap, &soap_tmp_delegation__getProxyReq, "delegation:getProxyReq", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_delegation__getProxyReq(soap, &soap_tmp_delegation__getProxyReq, "delegation:getProxyReq", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_4)
		return soap_closesock(soap);
	soap_default_delegation__getProxyReqResponse(soap, &_param_4);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_delegation__getProxyReqResponse(soap, &_param_4, "delegation:getProxyReqResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegation__getNewProxyReq(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct delegation__getNewProxyReqResponse &_param_5)
{	struct delegation__getNewProxyReq soap_tmp_delegation__getNewProxyReq;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-security-delegation";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_delegation__getNewProxyReq(soap, &soap_tmp_delegation__getNewProxyReq);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_delegation__getNewProxyReq(soap, &soap_tmp_delegation__getNewProxyReq, "delegation:getNewProxyReq", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_delegation__getNewProxyReq(soap, &soap_tmp_delegation__getNewProxyReq, "delegation:getNewProxyReq", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_5)
		return soap_closesock(soap);
	soap_default_delegation__getNewProxyReqResponse(soap, &_param_5);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_delegation__getNewProxyReqResponse(soap, &_param_5, "delegation:getNewProxyReqResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegation__renewProxyReq(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _delegationID, struct delegation__renewProxyReqResponse &_param_6)
{	struct delegation__renewProxyReq soap_tmp_delegation__renewProxyReq;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-security-delegation";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_delegation__renewProxyReq._delegationID = _delegationID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_delegation__renewProxyReq(soap, &soap_tmp_delegation__renewProxyReq);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_delegation__renewProxyReq(soap, &soap_tmp_delegation__renewProxyReq, "delegation:renewProxyReq", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_delegation__renewProxyReq(soap, &soap_tmp_delegation__renewProxyReq, "delegation:renewProxyReq", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_6)
		return soap_closesock(soap);
	soap_default_delegation__renewProxyReqResponse(soap, &_param_6);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_delegation__renewProxyReqResponse(soap, &_param_6, "delegation:renewProxyReqResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegation__putProxy(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _delegationID, std::string _proxy, struct delegation__putProxyResponse &_param_7)
{	struct delegation__putProxy soap_tmp_delegation__putProxy;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-security-delegation";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_delegation__putProxy._delegationID = _delegationID;
	soap_tmp_delegation__putProxy._proxy = _proxy;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_delegation__putProxy(soap, &soap_tmp_delegation__putProxy);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_delegation__putProxy(soap, &soap_tmp_delegation__putProxy, "delegation:putProxy", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_delegation__putProxy(soap, &soap_tmp_delegation__putProxy, "delegation:putProxy", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_7)
		return soap_closesock(soap);
	soap_default_delegation__putProxyResponse(soap, &_param_7);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_delegation__putProxyResponse(soap, &_param_7, "delegation:putProxyResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegation__getTerminationTime(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _delegationID, struct delegation__getTerminationTimeResponse &_param_8)
{	struct delegation__getTerminationTime soap_tmp_delegation__getTerminationTime;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-security-delegation";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_delegation__getTerminationTime._delegationID = _delegationID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_delegation__getTerminationTime(soap, &soap_tmp_delegation__getTerminationTime);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_delegation__getTerminationTime(soap, &soap_tmp_delegation__getTerminationTime, "delegation:getTerminationTime", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_delegation__getTerminationTime(soap, &soap_tmp_delegation__getTerminationTime, "delegation:getTerminationTime", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_8)
		return soap_closesock(soap);
	soap_default_delegation__getTerminationTimeResponse(soap, &_param_8);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_delegation__getTerminationTimeResponse(soap, &_param_8, "delegation:getTerminationTimeResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegation__destroy(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _delegationID, struct delegation__destroyResponse &_param_9)
{	struct delegation__destroy soap_tmp_delegation__destroy;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-security-delegation";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_delegation__destroy._delegationID = _delegationID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_delegation__destroy(soap, &soap_tmp_delegation__destroy);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_delegation__destroy(soap, &soap_tmp_delegation__destroy, "delegation:destroy", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_delegation__destroy(soap, &soap_tmp_delegation__destroy, "delegation:destroy", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_9)
		return soap_closesock(soap);
	soap_default_delegation__destroyResponse(soap, &_param_9);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_delegation__destroyResponse(soap, &_param_9, "delegation:destroyResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_implcfg__setConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, config__Configuration *_configuration, struct implcfg__setConfigurationResponse &_param_10)
{	struct implcfg__setConfiguration soap_tmp_implcfg__setConfiguration;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8444/fts3/config";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_implcfg__setConfiguration._configuration = _configuration;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_implcfg__setConfiguration(soap, &soap_tmp_implcfg__setConfiguration);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_implcfg__setConfiguration(soap, &soap_tmp_implcfg__setConfiguration, "implcfg:setConfiguration", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_implcfg__setConfiguration(soap, &soap_tmp_implcfg__setConfiguration, "implcfg:setConfiguration", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_10)
		return soap_closesock(soap);
	soap_default_implcfg__setConfigurationResponse(soap, &_param_10);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_implcfg__setConfigurationResponse(soap, &_param_10, "implcfg:setConfigurationResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_implcfg__delConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, config__Configuration *_configuration, struct implcfg__delConfigurationResponse &_param_11)
{	struct implcfg__delConfiguration soap_tmp_implcfg__delConfiguration;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8444/fts3/config";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_implcfg__delConfiguration._configuration = _configuration;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_implcfg__delConfiguration(soap, &soap_tmp_implcfg__delConfiguration);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_implcfg__delConfiguration(soap, &soap_tmp_implcfg__delConfiguration, "implcfg:delConfiguration", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_implcfg__delConfiguration(soap, &soap_tmp_implcfg__delConfiguration, "implcfg:delConfiguration", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_11)
		return soap_closesock(soap);
	soap_default_implcfg__delConfigurationResponse(soap, &_param_11);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_implcfg__delConfigurationResponse(soap, &_param_11, "implcfg:delConfigurationResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_implcfg__getConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string vo, std::string name, std::string source, std::string destination, struct implcfg__getConfigurationResponse &_param_12)
{	struct implcfg__getConfiguration soap_tmp_implcfg__getConfiguration;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8444/fts3/config";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_implcfg__getConfiguration.vo = vo;
	soap_tmp_implcfg__getConfiguration.name = name;
	soap_tmp_implcfg__getConfiguration.source = source;
	soap_tmp_implcfg__getConfiguration.destination = destination;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_implcfg__getConfiguration(soap, &soap_tmp_implcfg__getConfiguration);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_implcfg__getConfiguration(soap, &soap_tmp_implcfg__getConfiguration, "implcfg:getConfiguration", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_implcfg__getConfiguration(soap, &soap_tmp_implcfg__getConfiguration, "implcfg:getConfiguration", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_12)
		return soap_closesock(soap);
	soap_default_implcfg__getConfigurationResponse(soap, &_param_12);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_implcfg__getConfigurationResponse(soap, &_param_12, "implcfg:getConfigurationResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_implcfg__doDrain(struct soap *soap, const char *soap_endpoint, const char *soap_action, bool drain, struct implcfg__doDrainResponse &_param_13)
{	struct implcfg__doDrain soap_tmp_implcfg__doDrain;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8444/fts3/config";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_implcfg__doDrain.drain = drain;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_implcfg__doDrain(soap, &soap_tmp_implcfg__doDrain);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_implcfg__doDrain(soap, &soap_tmp_implcfg__doDrain, "implcfg:doDrain", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_implcfg__doDrain(soap, &soap_tmp_implcfg__doDrain, "implcfg:doDrain", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_13)
		return soap_closesock(soap);
	soap_default_implcfg__doDrainResponse(soap, &_param_13);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_implcfg__doDrainResponse(soap, &_param_13, "implcfg:doDrainResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_implcfg__setRetry(struct soap *soap, const char *soap_endpoint, const char *soap_action, int retry, struct implcfg__setRetryResponse &_param_14)
{	struct implcfg__setRetry soap_tmp_implcfg__setRetry;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8444/fts3/config";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_implcfg__setRetry.retry = retry;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_implcfg__setRetry(soap, &soap_tmp_implcfg__setRetry);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_implcfg__setRetry(soap, &soap_tmp_implcfg__setRetry, "implcfg:setRetry", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_implcfg__setRetry(soap, &soap_tmp_implcfg__setRetry, "implcfg:setRetry", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_14)
		return soap_closesock(soap);
	soap_default_implcfg__setRetryResponse(soap, &_param_14);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_implcfg__setRetryResponse(soap, &_param_14, "implcfg:setRetryResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_implcfg__setQueueTimeout(struct soap *soap, const char *soap_endpoint, const char *soap_action, unsigned int timeout, struct implcfg__setQueueTimeoutResponse &_param_15)
{	struct implcfg__setQueueTimeout soap_tmp_implcfg__setQueueTimeout;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8444/fts3/config";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_implcfg__setQueueTimeout.timeout = timeout;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_implcfg__setQueueTimeout(soap, &soap_tmp_implcfg__setQueueTimeout);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_implcfg__setQueueTimeout(soap, &soap_tmp_implcfg__setQueueTimeout, "implcfg:setQueueTimeout", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_implcfg__setQueueTimeout(soap, &soap_tmp_implcfg__setQueueTimeout, "implcfg:setQueueTimeout", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_15)
		return soap_closesock(soap);
	soap_default_implcfg__setQueueTimeoutResponse(soap, &_param_15);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_implcfg__setQueueTimeoutResponse(soap, &_param_15, "implcfg:setQueueTimeoutResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__transferSubmit(struct soap *soap, const char *soap_endpoint, const char *soap_action, tns3__TransferJob *_job, struct impltns__transferSubmitResponse &_param_16)
{	struct impltns__transferSubmit soap_tmp_impltns__transferSubmit;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-data-transfer-interface/FileTransfer";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_impltns__transferSubmit._job = _job;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_impltns__transferSubmit(soap, &soap_tmp_impltns__transferSubmit);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_impltns__transferSubmit(soap, &soap_tmp_impltns__transferSubmit, "impltns:transferSubmit", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_impltns__transferSubmit(soap, &soap_tmp_impltns__transferSubmit, "impltns:transferSubmit", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_16)
		return soap_closesock(soap);
	soap_default_impltns__transferSubmitResponse(soap, &_param_16);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_impltns__transferSubmitResponse(soap, &_param_16, "impltns:transferSubmitResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__transferSubmit2(struct soap *soap, const char *soap_endpoint, const char *soap_action, tns3__TransferJob *_job, struct impltns__transferSubmit2Response &_param_17)
{	struct impltns__transferSubmit2 soap_tmp_impltns__transferSubmit2;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-data-transfer-interface/FileTransfer";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_impltns__transferSubmit2._job = _job;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_impltns__transferSubmit2(soap, &soap_tmp_impltns__transferSubmit2);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_impltns__transferSubmit2(soap, &soap_tmp_impltns__transferSubmit2, "impltns:transferSubmit2", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_impltns__transferSubmit2(soap, &soap_tmp_impltns__transferSubmit2, "impltns:transferSubmit2", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_17)
		return soap_closesock(soap);
	soap_default_impltns__transferSubmit2Response(soap, &_param_17);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_impltns__transferSubmit2Response(soap, &_param_17, "impltns:transferSubmit2Response", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__transferSubmit3(struct soap *soap, const char *soap_endpoint, const char *soap_action, tns3__TransferJob2 *_job, struct impltns__transferSubmit3Response &_param_18)
{	struct impltns__transferSubmit3 soap_tmp_impltns__transferSubmit3;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-data-transfer-interface/FileTransfer";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_impltns__transferSubmit3._job = _job;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_impltns__transferSubmit3(soap, &soap_tmp_impltns__transferSubmit3);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_impltns__transferSubmit3(soap, &soap_tmp_impltns__transferSubmit3, "impltns:transferSubmit3", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_impltns__transferSubmit3(soap, &soap_tmp_impltns__transferSubmit3, "impltns:transferSubmit3", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_18)
		return soap_closesock(soap);
	soap_default_impltns__transferSubmit3Response(soap, &_param_18);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_impltns__transferSubmit3Response(soap, &_param_18, "impltns:transferSubmit3Response", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__transferSubmit4(struct soap *soap, const char *soap_endpoint, const char *soap_action, tns3__TransferJob3 *_job, struct impltns__transferSubmit4Response &_param_19)
{	struct impltns__transferSubmit4 soap_tmp_impltns__transferSubmit4;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-data-transfer-interface/FileTransfer";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_impltns__transferSubmit4._job = _job;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_impltns__transferSubmit4(soap, &soap_tmp_impltns__transferSubmit4);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_impltns__transferSubmit4(soap, &soap_tmp_impltns__transferSubmit4, "impltns:transferSubmit4", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_impltns__transferSubmit4(soap, &soap_tmp_impltns__transferSubmit4, "impltns:transferSubmit4", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_19)
		return soap_closesock(soap);
	soap_default_impltns__transferSubmit4Response(soap, &_param_19);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_impltns__transferSubmit4Response(soap, &_param_19, "impltns:transferSubmit4Response", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__prioritySet(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _jobId, int _priority, struct impltns__prioritySetResponse &_param_20)
{	struct impltns__prioritySet soap_tmp_impltns__prioritySet;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-data-transfer-interface/FileTransfer";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_impltns__prioritySet._jobId = _jobId;
	soap_tmp_impltns__prioritySet._priority = _priority;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_impltns__prioritySet(soap, &soap_tmp_impltns__prioritySet);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_impltns__prioritySet(soap, &soap_tmp_impltns__prioritySet, "impltns:prioritySet", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_impltns__prioritySet(soap, &soap_tmp_impltns__prioritySet, "impltns:prioritySet", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_20)
		return soap_closesock(soap);
	soap_default_impltns__prioritySetResponse(soap, &_param_20);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_impltns__prioritySetResponse(soap, &_param_20, "impltns:prioritySetResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__debugSet(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _source, std::string _destination, bool _debug, struct impltns__debugSetResponse &_param_21)
{	struct impltns__debugSet soap_tmp_impltns__debugSet;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-data-transfer-interface/FileTransfer";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_impltns__debugSet._source = _source;
	soap_tmp_impltns__debugSet._destination = _destination;
	soap_tmp_impltns__debugSet._debug = _debug;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_impltns__debugSet(soap, &soap_tmp_impltns__debugSet);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_impltns__debugSet(soap, &soap_tmp_impltns__debugSet, "impltns:debugSet", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_impltns__debugSet(soap, &soap_tmp_impltns__debugSet, "impltns:debugSet", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_21)
		return soap_closesock(soap);
	soap_default_impltns__debugSetResponse(soap, &_param_21);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_impltns__debugSetResponse(soap, &_param_21, "impltns:debugSetResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__blacklist(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _type, std::string _subject, bool _blk, struct impltns__blacklistResponse &_param_22)
{	struct impltns__blacklist soap_tmp_impltns__blacklist;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-data-transfer-interface/FileTransfer";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_impltns__blacklist._type = _type;
	soap_tmp_impltns__blacklist._subject = _subject;
	soap_tmp_impltns__blacklist._blk = _blk;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_impltns__blacklist(soap, &soap_tmp_impltns__blacklist);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_impltns__blacklist(soap, &soap_tmp_impltns__blacklist, "impltns:blacklist", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_impltns__blacklist(soap, &soap_tmp_impltns__blacklist, "impltns:blacklist", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_22)
		return soap_closesock(soap);
	soap_default_impltns__blacklistResponse(soap, &_param_22);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_impltns__blacklistResponse(soap, &_param_22, "impltns:blacklistResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__listRequests(struct soap *soap, const char *soap_endpoint, const char *soap_action, impltns__ArrayOf_USCOREsoapenc_USCOREstring *_inGivenStates, struct impltns__listRequestsResponse &_param_23)
{	struct impltns__listRequests soap_tmp_impltns__listRequests;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-data-transfer-interface/FileTransfer";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_impltns__listRequests._inGivenStates = _inGivenStates;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_impltns__listRequests(soap, &soap_tmp_impltns__listRequests);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_impltns__listRequests(soap, &soap_tmp_impltns__listRequests, "impltns:listRequests", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_impltns__listRequests(soap, &soap_tmp_impltns__listRequests, "impltns:listRequests", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_23)
		return soap_closesock(soap);
	soap_default_impltns__listRequestsResponse(soap, &_param_23);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_impltns__listRequestsResponse(soap, &_param_23, "impltns:listRequestsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__listRequests2(struct soap *soap, const char *soap_endpoint, const char *soap_action, impltns__ArrayOf_USCOREsoapenc_USCOREstring *_inGivenStates, std::string _forDN, std::string _forVO, struct impltns__listRequests2Response &_param_24)
{	struct impltns__listRequests2 soap_tmp_impltns__listRequests2;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-data-transfer-interface/FileTransfer";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_impltns__listRequests2._inGivenStates = _inGivenStates;
	soap_tmp_impltns__listRequests2._forDN = _forDN;
	soap_tmp_impltns__listRequests2._forVO = _forVO;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_impltns__listRequests2(soap, &soap_tmp_impltns__listRequests2);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_impltns__listRequests2(soap, &soap_tmp_impltns__listRequests2, "impltns:listRequests2", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_impltns__listRequests2(soap, &soap_tmp_impltns__listRequests2, "impltns:listRequests2", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_24)
		return soap_closesock(soap);
	soap_default_impltns__listRequests2Response(soap, &_param_24);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_impltns__listRequests2Response(soap, &_param_24, "impltns:listRequests2Response", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__getFileStatus(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _requestID, int _offset, int _limit, struct impltns__getFileStatusResponse &_param_25)
{	struct impltns__getFileStatus soap_tmp_impltns__getFileStatus;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-data-transfer-interface/FileTransfer";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_impltns__getFileStatus._requestID = _requestID;
	soap_tmp_impltns__getFileStatus._offset = _offset;
	soap_tmp_impltns__getFileStatus._limit = _limit;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_impltns__getFileStatus(soap, &soap_tmp_impltns__getFileStatus);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_impltns__getFileStatus(soap, &soap_tmp_impltns__getFileStatus, "impltns:getFileStatus", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_impltns__getFileStatus(soap, &soap_tmp_impltns__getFileStatus, "impltns:getFileStatus", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_25)
		return soap_closesock(soap);
	soap_default_impltns__getFileStatusResponse(soap, &_param_25);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_impltns__getFileStatusResponse(soap, &_param_25, "impltns:getFileStatusResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__getFileStatus2(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _requestID, int _offset, int _limit, struct impltns__getFileStatus2Response &_param_26)
{	struct impltns__getFileStatus2 soap_tmp_impltns__getFileStatus2;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-data-transfer-interface/FileTransfer";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_impltns__getFileStatus2._requestID = _requestID;
	soap_tmp_impltns__getFileStatus2._offset = _offset;
	soap_tmp_impltns__getFileStatus2._limit = _limit;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_impltns__getFileStatus2(soap, &soap_tmp_impltns__getFileStatus2);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_impltns__getFileStatus2(soap, &soap_tmp_impltns__getFileStatus2, "impltns:getFileStatus2", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_impltns__getFileStatus2(soap, &soap_tmp_impltns__getFileStatus2, "impltns:getFileStatus2", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_26)
		return soap_closesock(soap);
	soap_default_impltns__getFileStatus2Response(soap, &_param_26);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_impltns__getFileStatus2Response(soap, &_param_26, "impltns:getFileStatus2Response", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__getTransferJobStatus(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _requestID, struct impltns__getTransferJobStatusResponse &_param_27)
{	struct impltns__getTransferJobStatus soap_tmp_impltns__getTransferJobStatus;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-data-transfer-interface/FileTransfer";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_impltns__getTransferJobStatus._requestID = _requestID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_impltns__getTransferJobStatus(soap, &soap_tmp_impltns__getTransferJobStatus);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_impltns__getTransferJobStatus(soap, &soap_tmp_impltns__getTransferJobStatus, "impltns:getTransferJobStatus", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_impltns__getTransferJobStatus(soap, &soap_tmp_impltns__getTransferJobStatus, "impltns:getTransferJobStatus", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_27)
		return soap_closesock(soap);
	soap_default_impltns__getTransferJobStatusResponse(soap, &_param_27);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_impltns__getTransferJobStatusResponse(soap, &_param_27, "impltns:getTransferJobStatusResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__getTransferJobSummary(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _requestID, struct impltns__getTransferJobSummaryResponse &_param_28)
{	struct impltns__getTransferJobSummary soap_tmp_impltns__getTransferJobSummary;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-data-transfer-interface/FileTransfer";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_impltns__getTransferJobSummary._requestID = _requestID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_impltns__getTransferJobSummary(soap, &soap_tmp_impltns__getTransferJobSummary);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_impltns__getTransferJobSummary(soap, &soap_tmp_impltns__getTransferJobSummary, "impltns:getTransferJobSummary", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_impltns__getTransferJobSummary(soap, &soap_tmp_impltns__getTransferJobSummary, "impltns:getTransferJobSummary", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_28)
		return soap_closesock(soap);
	soap_default_impltns__getTransferJobSummaryResponse(soap, &_param_28);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_impltns__getTransferJobSummaryResponse(soap, &_param_28, "impltns:getTransferJobSummaryResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__getTransferJobSummary2(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _requestID, struct impltns__getTransferJobSummary2Response &_param_29)
{	struct impltns__getTransferJobSummary2 soap_tmp_impltns__getTransferJobSummary2;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-data-transfer-interface/FileTransfer";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_impltns__getTransferJobSummary2._requestID = _requestID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_impltns__getTransferJobSummary2(soap, &soap_tmp_impltns__getTransferJobSummary2);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_impltns__getTransferJobSummary2(soap, &soap_tmp_impltns__getTransferJobSummary2, "impltns:getTransferJobSummary2", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_impltns__getTransferJobSummary2(soap, &soap_tmp_impltns__getTransferJobSummary2, "impltns:getTransferJobSummary2", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_29)
		return soap_closesock(soap);
	soap_default_impltns__getTransferJobSummary2Response(soap, &_param_29);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_impltns__getTransferJobSummary2Response(soap, &_param_29, "impltns:getTransferJobSummary2Response", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__cancel(struct soap *soap, const char *soap_endpoint, const char *soap_action, impltns__ArrayOf_USCOREsoapenc_USCOREstring *_requestIDs, struct impltns__cancelResponse &_param_30)
{	struct impltns__cancel soap_tmp_impltns__cancel;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-data-transfer-interface/FileTransfer";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_impltns__cancel._requestIDs = _requestIDs;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_impltns__cancel(soap, &soap_tmp_impltns__cancel);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_impltns__cancel(soap, &soap_tmp_impltns__cancel, "impltns:cancel", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_impltns__cancel(soap, &soap_tmp_impltns__cancel, "impltns:cancel", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_30)
		return soap_closesock(soap);
	soap_default_impltns__cancelResponse(soap, &_param_30);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_impltns__cancelResponse(soap, &_param_30, "impltns:cancelResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__setJobPriority(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _requestID, int _priority, struct impltns__setJobPriorityResponse &_param_31)
{	struct impltns__setJobPriority soap_tmp_impltns__setJobPriority;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-data-transfer-interface/FileTransfer";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_impltns__setJobPriority._requestID = _requestID;
	soap_tmp_impltns__setJobPriority._priority = _priority;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_impltns__setJobPriority(soap, &soap_tmp_impltns__setJobPriority);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_impltns__setJobPriority(soap, &soap_tmp_impltns__setJobPriority, "impltns:setJobPriority", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_impltns__setJobPriority(soap, &soap_tmp_impltns__setJobPriority, "impltns:setJobPriority", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_31)
		return soap_closesock(soap);
	soap_default_impltns__setJobPriorityResponse(soap, &_param_31);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_impltns__setJobPriorityResponse(soap, &_param_31, "impltns:setJobPriorityResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__addVOManager(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _VOName, std::string _principal, struct impltns__addVOManagerResponse &_param_32)
{	struct impltns__addVOManager soap_tmp_impltns__addVOManager;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-data-transfer-interface/FileTransfer";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_impltns__addVOManager._VOName = _VOName;
	soap_tmp_impltns__addVOManager._principal = _principal;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_impltns__addVOManager(soap, &soap_tmp_impltns__addVOManager);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_impltns__addVOManager(soap, &soap_tmp_impltns__addVOManager, "impltns:addVOManager", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_impltns__addVOManager(soap, &soap_tmp_impltns__addVOManager, "impltns:addVOManager", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_32)
		return soap_closesock(soap);
	soap_default_impltns__addVOManagerResponse(soap, &_param_32);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_impltns__addVOManagerResponse(soap, &_param_32, "impltns:addVOManagerResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__removeVOManager(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _VOName, std::string _principal, struct impltns__removeVOManagerResponse &_param_33)
{	struct impltns__removeVOManager soap_tmp_impltns__removeVOManager;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-data-transfer-interface/FileTransfer";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_impltns__removeVOManager._VOName = _VOName;
	soap_tmp_impltns__removeVOManager._principal = _principal;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_impltns__removeVOManager(soap, &soap_tmp_impltns__removeVOManager);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_impltns__removeVOManager(soap, &soap_tmp_impltns__removeVOManager, "impltns:removeVOManager", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_impltns__removeVOManager(soap, &soap_tmp_impltns__removeVOManager, "impltns:removeVOManager", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_33)
		return soap_closesock(soap);
	soap_default_impltns__removeVOManagerResponse(soap, &_param_33);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_impltns__removeVOManagerResponse(soap, &_param_33, "impltns:removeVOManagerResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__listVOManagers(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _VOName, struct impltns__listVOManagersResponse &_param_34)
{	struct impltns__listVOManagers soap_tmp_impltns__listVOManagers;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-data-transfer-interface/FileTransfer";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_impltns__listVOManagers._VOName = _VOName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_impltns__listVOManagers(soap, &soap_tmp_impltns__listVOManagers);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_impltns__listVOManagers(soap, &soap_tmp_impltns__listVOManagers, "impltns:listVOManagers", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_impltns__listVOManagers(soap, &soap_tmp_impltns__listVOManagers, "impltns:listVOManagers", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_34)
		return soap_closesock(soap);
	soap_default_impltns__listVOManagersResponse(soap, &_param_34);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_impltns__listVOManagersResponse(soap, &_param_34, "impltns:listVOManagersResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__getRoles(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct impltns__getRolesResponse &_param_35)
{	struct impltns__getRoles soap_tmp_impltns__getRoles;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-data-transfer-interface/FileTransfer";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_impltns__getRoles(soap, &soap_tmp_impltns__getRoles);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_impltns__getRoles(soap, &soap_tmp_impltns__getRoles, "impltns:getRoles", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_impltns__getRoles(soap, &soap_tmp_impltns__getRoles, "impltns:getRoles", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_35)
		return soap_closesock(soap);
	soap_default_impltns__getRolesResponse(soap, &_param_35);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_impltns__getRolesResponse(soap, &_param_35, "impltns:getRolesResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__getRolesOf(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _otherDN, struct impltns__getRolesOfResponse &_param_36)
{	struct impltns__getRolesOf soap_tmp_impltns__getRolesOf;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-data-transfer-interface/FileTransfer";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_impltns__getRolesOf._otherDN = _otherDN;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_impltns__getRolesOf(soap, &soap_tmp_impltns__getRolesOf);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_impltns__getRolesOf(soap, &soap_tmp_impltns__getRolesOf, "impltns:getRolesOf", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_impltns__getRolesOf(soap, &soap_tmp_impltns__getRolesOf, "impltns:getRolesOf", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_36)
		return soap_closesock(soap);
	soap_default_impltns__getRolesOfResponse(soap, &_param_36);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_impltns__getRolesOfResponse(soap, &_param_36, "impltns:getRolesOfResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__getVersion(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct impltns__getVersionResponse &_param_37)
{	struct impltns__getVersion soap_tmp_impltns__getVersion;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-data-transfer-interface/FileTransfer";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_impltns__getVersion(soap, &soap_tmp_impltns__getVersion);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_impltns__getVersion(soap, &soap_tmp_impltns__getVersion, "impltns:getVersion", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_impltns__getVersion(soap, &soap_tmp_impltns__getVersion, "impltns:getVersion", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_37)
		return soap_closesock(soap);
	soap_default_impltns__getVersionResponse(soap, &_param_37);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_impltns__getVersionResponse(soap, &_param_37, "impltns:getVersionResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__getSchemaVersion(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct impltns__getSchemaVersionResponse &_param_38)
{	struct impltns__getSchemaVersion soap_tmp_impltns__getSchemaVersion;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-data-transfer-interface/FileTransfer";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_impltns__getSchemaVersion(soap, &soap_tmp_impltns__getSchemaVersion);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_impltns__getSchemaVersion(soap, &soap_tmp_impltns__getSchemaVersion, "impltns:getSchemaVersion", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_impltns__getSchemaVersion(soap, &soap_tmp_impltns__getSchemaVersion, "impltns:getSchemaVersion", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_38)
		return soap_closesock(soap);
	soap_default_impltns__getSchemaVersionResponse(soap, &_param_38);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_impltns__getSchemaVersionResponse(soap, &_param_38, "impltns:getSchemaVersionResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__getInterfaceVersion(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct impltns__getInterfaceVersionResponse &_param_39)
{	struct impltns__getInterfaceVersion soap_tmp_impltns__getInterfaceVersion;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-data-transfer-interface/FileTransfer";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_impltns__getInterfaceVersion(soap, &soap_tmp_impltns__getInterfaceVersion);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_impltns__getInterfaceVersion(soap, &soap_tmp_impltns__getInterfaceVersion, "impltns:getInterfaceVersion", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_impltns__getInterfaceVersion(soap, &soap_tmp_impltns__getInterfaceVersion, "impltns:getInterfaceVersion", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_39)
		return soap_closesock(soap);
	soap_default_impltns__getInterfaceVersionResponse(soap, &_param_39);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_impltns__getInterfaceVersionResponse(soap, &_param_39, "impltns:getInterfaceVersionResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impltns__getServiceMetadata(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _key, struct impltns__getServiceMetadataResponse &_param_40)
{	struct impltns__getServiceMetadata soap_tmp_impltns__getServiceMetadata;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-data-transfer-interface/FileTransfer";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_impltns__getServiceMetadata._key = _key;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_impltns__getServiceMetadata(soap, &soap_tmp_impltns__getServiceMetadata);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_impltns__getServiceMetadata(soap, &soap_tmp_impltns__getServiceMetadata, "impltns:getServiceMetadata", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_impltns__getServiceMetadata(soap, &soap_tmp_impltns__getServiceMetadata, "impltns:getServiceMetadata", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_40)
		return soap_closesock(soap);
	soap_default_impltns__getServiceMetadataResponse(soap, &_param_40);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_impltns__getServiceMetadataResponse(soap, &_param_40, "impltns:getServiceMetadataResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_log__GetLog(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string jobId, struct log__GetLogResponse &_param_41)
{	struct log__GetLog soap_tmp_log__GetLog;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:80";
	soap->encodingStyle = NULL;
	soap_tmp_log__GetLog.jobId = jobId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_log__GetLog(soap, &soap_tmp_log__GetLog);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_log__GetLog(soap, &soap_tmp_log__GetLog, "log:GetLog", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_log__GetLog(soap, &soap_tmp_log__GetLog, "log:GetLog", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_41)
		return soap_closesock(soap);
	soap_default_log__GetLogResponse(soap, &_param_41);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_log__GetLogResponse(soap, &_param_41, "log:GetLogResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_log__GetLogInternal(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string jobId, struct log__GetLogInternalResponse &_param_42)
{	struct log__GetLogInternal soap_tmp_log__GetLogInternal;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:80";
	soap->encodingStyle = NULL;
	soap_tmp_log__GetLogInternal.jobId = jobId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_log__GetLogInternal(soap, &soap_tmp_log__GetLogInternal);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_log__GetLogInternal(soap, &soap_tmp_log__GetLogInternal, "log:GetLogInternal", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_log__GetLogInternal(soap, &soap_tmp_log__GetLogInternal, "log:GetLogInternal", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_42)
		return soap_closesock(soap);
	soap_default_log__GetLogInternalResponse(soap, &_param_42);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_log__GetLogInternalResponse(soap, &_param_42, "log:GetLogInternalResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

} // namespace fts3


#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of fts3Client.cpp */
