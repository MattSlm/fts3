#!/usr/bin/env python
# meta: proxy=true
# meta: preconfig=../FTS3-config
import itertools
import logging
import time
from lib import base, fts3, storage


class TestSetPriority(base.TestBase):
    
    def setUp(self):
        self.transfers = {}
        self.configuration = {}
        
        for (srcBaseSurl, dstBaseSurl) in storage.getStoragePairs():
            srcSE = storage.getStorageElement(srcBaseSurl)
            dstSE = storage.getStorageElement(dstBaseSurl)
            nestedTransfers = []
            for i in range(3):
                srcSurl = self.surl.generate(srcBaseSurl)
                dstSurl = self.surl.generate(dstBaseSurl)
                nestedTransfers.append((srcSurl, dstSurl))
            self.transfers[(srcSE, dstSE)] = nestedTransfers
            
    def tearDown(self):
        for (srcSE, dstSE) in self.transfers.keys():
            self._removeFiles(self.transfers[(srcSE, dstSE)])

    def set_the_priority(self, transfers):
        import random
        idx = 1
        for (src, dst) in transfers:
            logging.info("Creating source files...")
            self.surl.create(src)
            jobId = self.client.submit([{'sources': [src], 'destinations': [dst]}])
            if idx % 2 == 0:
                priority = random.randint(1, 5)
                self.client.setPriority(jobId, priority)
#                print "jobid = ", jobId, " | priority = ", priority
            idx = idx + 1
        
    def test_set_priority(self):
        """
        Setting random priority.
        Let's set the random priority for the even jobs
        """
        for (srcSE, dstSE) in self.transfers:
            transfers = self.transfers[(srcSE, dstSE)]
            self.set_the_priority(transfers)

if __name__ == '__main__':
    import sys
    sys.exit(TestSetPriority().run())
