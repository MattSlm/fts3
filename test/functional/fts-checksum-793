#!/usr/bin/env python
# meta: proxy=true
# meta: preconfig=../FTS3-config
import itertools
import logging
from lib import base 

class TestChecksum793(base.TestBase):
    """
    Regression test for ticket #793
    https://svnweb.cern.ch/trac/fts3/ticket/793
    -K flag ignored when reused is also specified.
    """
    
    def _badChecksum(self, chk):
        """
        To generate a bad checksum, we get the right one
        and add any value.
        """
        (al, val) = chk.split(':')
        val = "%x" % (int(val, 16) + 42)
        return al + ':' + val


    def test_rightChecksum(self):
        """
        Reuse with right checksum
        """
        for (src, dst) in self.transfers:
            logging.info("Transfer with user checksum %s => %s" % (src, dst))
            srcChecksum = self.surl.create(src)
            jobId = self.client.submit([{'sources': [src], 'destinations': [dst], 'checksums': [srcChecksum]}], ['-K', '-r'])
            logging.info("Got job id %s" % jobId)
            state = self.client.poll(jobId)
            logging.info("Finished with %s" % state)
            self.assertEqual('FINISHED', state, 'job.state')
            dstChecksum = self.surl.checksum(dst)
            self.assertEqual(srcChecksum, dstChecksum, 'file.checksum')


    def test_badChecksum(self):
        """
        Reuse with bad checksum and -K flag
        """
        for (src, dst) in self.transfers:
            logging.info("Transfer with wrong user checksum %s => %s" % (src, dst))
            srcChecksum = self.surl.create(src)
            badChecksum = self._badChecksum(srcChecksum)
            jobId = self.client.submit([{'sources': [src], 'destinations': [dst], 'checksums': [badChecksum]}], ['-K', '-o', '-r'])
            logging.info("Got job id %s" % jobId)
            state = self.client.poll(jobId)
            logging.info("Finished with %s" % state)
            self.assertEqual('FAILED', state, 'job.state')


    def test_withBadUserChecksumNoFlag(self):
        """
        Reuse with bad checksum and no -K flag
        """
        for (src, dst) in self.transfers:
            logging.info("Transfer with wrong user checksum and no flag %s => %s" % (src, dst))
            srcChecksum = self.surl.create(src)
            badChecksum = self._badChecksum(srcChecksum)
            jobId = self.client.submit([{'sources': [src], 'destinations': [dst], 'checksums': [badChecksum]}], ['-o', '-r'])
            logging.info("Got job id %s" % jobId)
            state = self.client.poll(jobId)
            logging.info("Finished with %s" % state)
            self.assertEqual('FAILED', state, 'job.state')


if __name__ == '__main__':
    import sys
    sys.exit(TestChecksum793().run())
