#!/usr/bin/env python
# meta: proxy=true
# meta: preconfig=../FTS3-config
import itertools
import logging
import gfal2
from lib import base, storage, fts3, config, surl

class TestDelete(base.TestBase):

        def setUp(self):
            self.transfers = []

            for (srcSa, dstSa) in storage.getStoragePairs():
                srcSurl = self.surl.generate(srcSa)
                dstSurl = self.surl.generate(dstSa)
                self.transfers.extend((srcSurl, dstSurl))
            return self.transfers


        def test_delete(self):
                """
                Deleting a file must succeed
                """
                for transfers in self.transfers:
                        logging.info("Transfer deleting %s" % (transfers))
                        self.surl.create(transfers)
                        jobId = self.client.delete(transfers)
                        logging.info("Got job id %s" % jobId)
                        state = self.client.poll(jobId)
                        logging.info("Finished with %s" % state)
                        self.assertEqual('FINISHED', state, 'job.state')
                        self.gctx = gfal2.creat_context()
                        self.assertRaises(Exception, self.gctx.stat, jobId)


        def test_deleteFailed(self):
                """
                Deleting a file must be failed. We are trying to delete a file which does NOT exist.
                """
                for transfers in self.transfers:
                        logging.info("Transfer deleting %s" % (transfers))
                        jobId = self.client.delete(transfers)
                        logging.info("Got job id %s" % jobId)
                        state = self.client.poll(jobId)
                        logging.info("Finished with %s" % state)
                        self.assertEqual('FAILED', state, 'job.state')
                        self.gctx = gfal2.creat_context()
                        self.assertRaises(Exception, self.gctx.stat, jobId)

        def test_deleteFinishedDirty(self):
                """
                Deleting a file must FINISHDIRTY. We'll try to delete both existing and not existing file.
                """
                myresult = []
                transfers = self.transfers[2]
                self.surl.create(transfers)
                myresult.append(transfers)
                transfers = self.transfers[1]
                myresult.append(transfers)
                transfers = str('\n'.join(myresult))
                logging.info("Transfer deleting %s" % (transfers))
                jobId = self.client.delete(transfers)
                logging.info("Got job id %s" % jobId)
                state = self.client.poll(jobId)
                logging.info("Finished with %s" % state)
                self.assertEqual('FINISHEDDIRTY', state, 'job.state')
                self.gctx = gfal2.creat_context()
                self.assertRaises(Exception, self.gctx.stat, jobId)


if __name__ == '__main__':
        import sys
        sys.exit(TestDelete().run())
