#!/usr/bin/env python
# meta: proxy=true
# meta: preconfig=../FTS3-config
import itertools
import logging
from lib import base, storage 


class TestBanSe(base.TestBase):
    
    def tearDown(self):
        base.TestBase.tearDown(self)
        for (src, dst) in self.transfers:
            srcSE = storage.getStorageElement(src)
            dstSE = storage.getStorageElement(dst)
            self.client.unbanSe(srcSE)
            self.client.unbanSe(dstSE)
    
    def test_ban_src_se(self):
        """
        Ban source SE. Transfer must fail
        """
        for (src, dst) in self.transfers:
            logging.info("Transfer banning source %s => %s" % (src, dst))
            self.surl.create(src)
            srcSE = storage.getStorageElement(src)
            self.client.banSe(srcSE)
            self.assertRaises(Exception, self.client.submit, [{'sources': [src], 'destinations': [dst]}])
            self.client.unbanSe(srcSE)


    def test_ban_dst_se(self):
        """
        Ban destination SE. Transfer must fail
        """
        for (src, dst) in self.transfers:
            logging.info("Transfer banning destination %s => %s" % (src, dst))
            self.surl.create(src)
            dstSE = storage.getStorageElement(dst)
            self.client.banSe(dstSE)
            self.assertRaises(Exception, self.client.submit, [{'sources': [src], 'destinations': [dst]}])
            self.client.unbanSe(dstSE)


if __name__ == '__main__':
    import sys
    sys.exit(TestBanSe().run())
