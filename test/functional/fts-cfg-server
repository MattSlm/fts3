#!/usr/bin/env python
# meta: proxy=true
# meta: preconfig=../FTS3-config
import itertools
import logging
import time
from lib import base, fts3, storage,config


class TestFTSCfgServer(base.TestBase):
    
    def tearDown(self):
        pass

    def bring_online(self):
        logging.info("Setting option --bring-online")
        cmdArray = ['fts-config-set', '-s', config.Fts3Endpoint, '--bring-online']
        self.client._spawn(cmdArray)

    def drain(self):
        for i in ['on','off']:
            logging.info("Setting option --drain to \'%s\'" % i)
            cmdArray = ['fts-config-set', '-s', config.Fts3Endpoint, '--drain', i]
            self.client._spawn(cmdArray)

    def retry(self):
        number = 5
        logging.info("Setting option --retry to %d" % number)
        cmdArray = ['fts-config-set', '-s', config.Fts3Endpoint, '--retry', config.Vo, str(number)]
        self.client._spawn(cmdArray)

    def optimizer_mode(self):
        for i in range(1, 4):
            logging.info("Setting option --optimizer-mode to %d" % i)
            cmdArray = ['fts-config-set', '-s', config.Fts3Endpoint, '--optimizer-mode', str(i)]
            self.client._spawn(cmdArray)

    def queue_timeout(self):
        queuetime = 1
        logging.info("Setting option --queue-timeout to %d" % queuetime)
        cmdArray = ['fts-config-set', '-s', config.Fts3Endpoint, '--queue-timeout', str(queuetime)]
        self.client._spawn(cmdArray)

    def test_fts_cfg_server(self):
        """
        Test options for fts-cfg-server command: bring-online, drain, retry, optimizer-mode, queue-timeout
        """
        self.bring_online()
        #self.drain()
        self.retry()
        self.optimizer_mode()
        #self.queue_timeout()



if __name__ == '__main__':
    import sys
    sys.exit(TestFTSCfgServer().run())
