#!/usr/bin/env python
# meta: proxy=true
# meta: preconfig=../FTS3-config
import itertools
import logging
from lib import base, storage, config

class BanWhileRunning(base.TestBase):

    def tearDown(self):
        base.TestBase.tearDown(self)
        for (src, dst) in self.transfers:
            srcSE = storage.getStorageElement(src)
            dstSE = storage.getStorageElement(dst)
            self.client.unbanSEcancel(srcSE)
            self.client.unbanSEwait(srcSE)

#            self.client.unbanSe(dstSE)

    def test_ban_while_running(self):
        """
        Submitting the transfer while it stays in the queue
        Than we will try to ban it with the status CANCEL
        """
        for (src, dst) in self.transfers:
            self.surl.create(src)
            jobId = self.client.submit([{'sources': [src], 'destinations': [dst]}], extraArgs = ['--retry', '1', '--retry-delay', '10'])
            logging.info("Got job id %s" % jobId)
 
            srcSE = storage.getStorageElement(src)
            self.client.banSEcancel(srcSE)
            state = self.client.poll(jobId)
            self.assertRaises(Exception, self.client.submit, [{'sources': [src], 'destinations': [dst]}])
            self.client.unbanSe(srcSE)
            logging.info("Finished with %s" % state)
            self.assertEqual('CANCELED', state, 'job.state')

    def test_wait_while_running(self):
        """
        Submitting the transfer while it stays in the queue
        Than we will try to ban it with the status WAIT
        """
        config.Timeout = 20
        for (src, dst) in self.transfers[:1]:
            self.surl.create(src)
            jobId = self.client.submit([{'sources': [src], 'destinations': [dst]}], extraArgs = ['--retry', '1', '--retry-delay', '10'])
            logging.info("Got job id %s" % jobId)
            
            srcSE = storage.getStorageElement(src)
            self.client.banSEwait(srcSE)
            self.client.unbanSEwait(srcSE)
            state = self.client.poll(jobId)
            self.assertRaises(Exception, self.client.submit, [{'sources': [src], 'destinations': [dst]}])
            self.client.unbanSEwait(srcSE)
            logging.info("Finished with %s" % state)
            self.assertEqual('FINISHED', state, 'job.state')


if __name__ == '__main__':
    import sys
    sys.exit(BanWhileRunning().run())
