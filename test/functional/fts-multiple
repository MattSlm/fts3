#!/usr/bin/env python
# meta: proxy=true
# meta: preconfig=../FTS3-config
import itertools
import logging
import unittest
from lib import base, storage 


class TestMultiple(base.TestBase):

	def setUp(self):
		# Need to create three sources and three destinations
		self.transfers = []
		for (srcSa, dstSa) in storage.getStoragePairs():
			pairs = []
			for i in range(3):
				s = self.surl.generate(srcSa)
				d = self.surl.generate(dstSa)
				pairs.append((s, d))
			self.transfers.append(pairs)


	def test_multiple(self):
		"""
		Transfer multiple files without reusing
		"""
		for t in self.transfers:
			logging.info("Transfer multiple files without reuse")
			files = []
			for (src, dst) in t:
				logging.info("%s => %s" % (src, dst))
				self.surl.create(src)
				files.append({'sources': [src], 'destinations': [dst]})

			jobId = self.client.submit(files)
			logging.info("Got job id %s" % jobId)
			state = self.client.poll(jobId)
			logging.info("Job %s finished with %s" % (jobId, state))
			self.assertEqual('FINISHED', state)


	def test_multipleWithReuse(self):
		"""
		Transfer multiple files with reuse
		"""
		for t in self.transfers:
			logging.info("Transfer multiple files with reuse")
			files = []
			for (src, dst) in t:
				logging.info("%s => %s" % (src, dst))
				self.surl.create(src)
				files.append({'sources': [src], 'destinations': [dst]})

			jobId = self.client.submit(files, ['-r'])
			logging.info("Got job id %s" % jobId)
			state = self.client.poll(jobId)
			logging.info("Job %s finished with %s" % (jobId, state))
			self.assertEqual('FINISHED', state)
		

	def test_multipleDirty(self):
		"""
		Transfer multiple without reuse and one of them
		will fail, so the status should be FINISHEDDIRTY
		"""
		for t in self.transfers:
			logging.info("Transfer multiple files without reuse. One will fail")
			files = []
			nCreate = len(t) - 1			
			for (src, dst) in t:
				logging.info("%s => %s" % (src, dst))
				if nCreate:
					self.surl.create(src)
					nCreate -= 1
				else:
					logging.debug("Not creating %s" % src)
				files.append({'sources': [src], 'destinations': [dst]})

			jobId = self.client.submit(files)
			logging.info("Got job id %s" % jobId)
			state = self.client.poll(jobId)
			logging.info("Job %s finished with %s" % (jobId, state))
			self.assertEqual('FINISHEDDIRTY', state)


if __name__ == '__main__':
	unittest.main()

