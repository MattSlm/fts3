#!/usr/bin/env python
# meta: proxy=true
# meta: preconfig=../FTS3-config
import itertools
import logging
from lib import base, storage 


class TestMultiple(base.TestBase):

    def setUp(self):
        # Need to create three sources and three destinations
        self.transfers = []
        for (srcSa, dstSa) in storage.getStoragePairs():
            pairs = []
            for i in range(3):
                s = self.surl.generate(srcSa)
                d = self.surl.generate(dstSa)
                pairs.append((s, d))
            self.transfers.append(pairs)


    def test_multiple(self):
        """
        Transfer multiple files without reusing
        """
        for t in self.transfers:
            logging.info("Transfer multiple files without reuse")
            files = []
            for (src, dst) in t:
                logging.info("%s => %s" % (src, dst))
                self.surl.create(src)
                files.append({'sources': [src], 'destinations': [dst]})

            jobId = self.client.submit(files)
            logging.info("Got job id %s" % jobId)
            state = self.client.poll(jobId)
            logging.info("Job %s finished with %s" % (jobId, state))
            self.assertEqual('FINISHED', state)

            files = self.client.getFileInfo(jobId)
            for pair in files.keys():
                self.assertEqual('FINISHED', files[pair]['state'])
    

    def test_multipleDirty(self):
        """
        Transfer multiple without reuse and one of them
        will fail, so the status should be FINISHEDDIRTY
        """
        for t in self.transfers:
            logging.info("Transfer multiple files without reuse. One will fail")
            files = []
            nCreate = len(t) - 1
            created = []
            for (src, dst) in t:
                logging.info("%s => %s" % (src, dst))
                if nCreate:
                    self.surl.create(src)
                    created.append(src)
                    nCreate -= 1
                else:
                    logging.debug("Not creating %s" % src)
                files.append({'sources': [src], 'destinations': [dst]})

            jobId = self.client.submit(files)
            logging.info("Got job id %s" % jobId)
            state = self.client.poll(jobId)
            logging.info("Job %s finished with %s" % (jobId, state))
            self.assertEqual('FINISHEDDIRTY', state)

            files = self.client.getFileInfo(jobId)
            for (src, dst) in files.keys():
                if src in created:
                    self.assertEqual('FINISHED', files[(src, dst)]['state'])
                else:
                    self.assertEqual('FAILED', files[(src, dst)]['state'])


if __name__ == '__main__':
    import sys
    sys.exit(TestMultiple().run())

