#!/usr/bin/env python
# meta: proxy=true
# meta: preconfig=../FTS3-config
import itertools
import logging
from lib import base 


class TestUserChecksum(base.TestBase):

	def test_withUserChecksum(self):
		"""
		Ask to validate the checksum and provide the right checksum
		"""
		for (src, dst) in self.transfers:
			logging.info("Transfer with user checksum %s => %s" % (src, dst))
			srcChecksum = self.surl.create(src)
			jobId = self.client.submit([{'sources': [src], 'destinations': [dst], 'checksums': [srcChecksum]}], ['-K'])
			logging.info("Got job id %s" % jobId)
			state = self.client.poll(jobId)
			logging.info("Finished with %s" % state)
			self.assertEqual(state, 'FINISHED')
			dstChecksum = self.surl.checksum(dst)
			self.assertEqual(srcChecksum, dstChecksum)


	def _badChecksum(self, chk):
		"""
		To generate a bad checksum, we get the right one
		and add any value.
		"""
		(al, val) = chk.split(':')
		val = "%x" % (int(val, 16) + 42)
		return al + ':' + val


	def test_withBadUserChecksum(self):
		"""
		Ask to validate the checksum but give a bad one on purpose
		"""
		for (src, dst) in self.transfers:
			logging.info("Transfer with wrong user checksum %s => %s" % (src, dst))
			srcChecksum = self.surl.create(src)
			badChecksum = self._badChecksum(srcChecksum)
			jobId = self.client.submit([{'sources': [src], 'destinations': [dst], 'checksums': [badChecksum]}], ['-K', '-o'])
			logging.info("Got job id %s" % jobId)
			state = self.client.poll(jobId)
			logging.info("Finished with %s" % state)
			self.assertEqual(state, 'FAILED')


if __name__ == '__main__':
	import sys
	sys.exit(TestUserChecksum().run())
