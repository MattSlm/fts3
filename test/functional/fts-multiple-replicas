#!/usr/bin/env python
# meta: proxy=true
# meta: preconfig=../FTS3-config
import itertools
import logging
from lib import base, storage 


class TestMultipleReplicas(base.TestBase):

	def setUp(self):
		# Need to create three sources!
		self.transfers = []
		for (srcSa, dstSa) in storage.getStoragePairs():
			srcSurl1 = self.surl.generate(srcSa)
			srcSurl2 = self.surl.generate(srcSa)
			srcSurl3 = self.surl.generate(srcSa)
			dstSurl = self.surl.generate(dstSa)
			self.transfers.append((srcSurl1, srcSurl2, srcSurl3, dstSurl))


	def test_multipleWithReuse(self):
		"""
		Submitting multiple replicas with reuse enabled must fail,
		since those are two incompatible modes
		"""
		for (src1, src2, src3, dst) in self.transfers:
			logging.info("Transfer with multiple sources and reuse enabled")
			logging.info(src1)
			logging.info(src2)
			logging.info(src3)
			logging.info("\t=> %s" % dst)
			self.assertRaises(Exception, self.client.submit,
				[{'sources': [src1, src2, src3],'destinations': [dst]}],
                ['-r'])


	def test_multipleNoExists(self):
		"""
		Three source replicas are given, but all of them do not exist,
		so the job final status must be failed
		"""
		for (src1, src2, src3, dst) in self.transfers:
			logging.info("Transfer with multiple nonexistent sources")
			logging.info(src1)
			logging.info(src2)
			logging.info(src3)
			logging.info("\t=> %s" % dst)
			jobId = self.client.submit([{'sources': [src1, src2, src3],'destinations': [dst]}])
			logging.info("Got job id %s" % jobId)
			state = self.client.poll(jobId)
			logging.info("Job %s finished with %s" % (jobId, state))
			self.assertEqual('FAILED', state)


	def test_multipleOneExists(self):
		"""
		Three source replicas are given, and only one exists.
		The transfer must succeed. 
		"""
		for (src1, src2, src3, dst) in self.transfers:
			logging.info("Transfer with multiple sources, only one exists")
			logging.info(src1)
			logging.info(src2)
			logging.info(src3)
			self.surl.create(src3)
			logging.info("\t=> %s" % dst)
			jobId = self.client.submit([{'sources': [src1, src2, src3],'destinations': [dst]}])
			logging.info("Got job id %s" % jobId)
			state = self.client.poll(jobId)
			logging.info("Job %s finished with %s" % (jobId, state))
			self.assertEqual('FINISHED', state)
	

if __name__ == '__main__':
	import sys
	sys.exit(TestMultipleReplicas().run())

