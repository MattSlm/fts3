#!/usr/bin/env python
# meta: proxy=true
# meta: preconfig=../FTS3-config
import itertools
import logging
from lib import base, storage 


class TestMultipleReuse(base.TestBase):

    def setUp(self):
        # Need to create three sources and three destinations
        self.transfers = []
        for (srcSa, dstSa) in storage.getStoragePairs():
            pairs = []
            for i in range(3):
                s = self.surl.generate(srcSa)
                d = self.surl.generate(dstSa)
                pairs.append((s, d))
            self.transfers.append(pairs)


    def test_multipleWithReuse(self):
        """
        Transfer multiple files with reuse
        """
        for t in self.transfers:
            logging.info("Transfer multiple files with reuse")
            files = []
            for (src, dst) in t:
                logging.info("%s => %s" % (src, dst))
                self.surl.create(src)
                files.append({'sources': [src], 'destinations': [dst]})

            jobId = self.client.submit(files, ['-r'])
            logging.info("Got job id %s" % jobId)
            state = self.client.poll(jobId)
            logging.info("Job %s finished with %s" % (jobId, state))
            self.assertEqual('FINISHED', state, 'job.state')

            files = self.client.getFileInfo(jobId)
            i = 0
            for pair in files.keys():
                label = 'job.files[' + str(i) + '].state'
                self.assertEqual('FINISHED', files[pair]['state'], label)
                i += 1


    def test_multipleWithReuseDirty(self):
        """
        Transfer multiple files with reuse, one does not exist
        """
        for t in self.transfers:
            logging.info("Transfer multiple files with reuse, one does not exist")
            files = []
            created = []
            nCreated = len(t) - 1
            for (src, dst) in t:
                logging.info("%s => %s" % (src, dst))
                if nCreated > 0:
                    self.surl.create(src)
                    created.append(src)
                    nCreated -= 1
                files.append({'sources': [src], 'destinations': [dst]})

            jobId = self.client.submit(files, ['-r'])
            logging.info("Got job id %s" % jobId)
            state = self.client.poll(jobId)
            logging.info("Job %s finished with %s" % (jobId, state))
            self.assertEqual('FINISHEDDIRTY', state, 'job.state')

            files = self.client.getFileInfo(jobId)
            i = 0
            for (src, dst) in files.keys():
                label = 'job.files[' + str(i) + '].state'
                if src in created:
                    self.assertEqual('FINISHED', files[(src, dst)]['state'], label)
                else:
                    self.assertEqual('FAILED', files[(src, dst)]['state'], label)
                i += 1

    def test_multipleWithReuseDirty2(self):
        """
        Same as before, but let the first fail. Error message should not
        affect other transfers
        """
        for t in self.transfers:
            logging.info("Transfer multiple files with reuse, first does not exist")
            files = []
            created = []
            index = 0
            for (src, dst) in t:
                logging.info("%s => %s" % (src, dst))
                if index > 0:
                    self.surl.create(src)
                    created.append(src)
                files.append({'sources': [src], 'destinations': [dst]})
                index += 1

            jobId = self.client.submit(files, ['-r'])
            logging.info("Got job id %s" % jobId)
            state = self.client.poll(jobId)
            logging.info("Job %s finished with %s" % (jobId, state))
            self.assertEqual('FINISHEDDIRTY', state, 'job.state')

            files = self.client.getFileInfo(jobId)
            i = 0 
            for (src, dst) in files.keys():
                label = 'job.files[' + str(i) + ']'
                if src in created:
                    self.assertEqual('FINISHED', files[(src, dst)]['state'], label + '.state')
                    self.assertEqual('', files[(src, dst)]['reason'], label + '.reason')
                else:
                    self.assertEqual('FAILED', files[(src, dst)]['state'], label + '.state')
                    self.assertEqual('SOURCE Failed to get source file', files[(src, dst)]['reason'][:32], label + '.reason')
                i += 1


if __name__ == '__main__':
    import sys
    sys.exit(TestMultipleReuse().run())

