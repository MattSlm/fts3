#!/usr/bin/env python
# meta: proxy=true
# meta: preconfig=../FTS3-config
import itertools
import logging
from lib import base 


class TestCancel(base.TestBase):

	def test_cancelNoFinished(self):
		"""
		Cancelling a file that is still active/submitted must succeed
		"""
		for (src, dst) in self.transfers:
			logging.info("Transfer cancelling %s => %s" % (src, dst))
			self.surl.create(src)
			jobId = self.client.submit([{'sources': [src], 'destinations': [dst]}])
			logging.info("Got job id %s" % jobId)
			self.client.cancel(jobId)
			state = self.client.poll(jobId)
			logging.info("Finished with %s" % state)
			self.assertEqual(state, 'CANCELED')



if __name__ == '__main__':
	import sys
	sys.exit(TestCancel().run())

