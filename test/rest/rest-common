#!/bin/bash

SRC='{"files":[{"sources":["'
del='"],'
DST='"destinations":["'
END='"]}]}'

function copyToDPM()
{    echo "copyToDPM($1)"
    export GSIFTP="$dpm_SE1/$DPM_SRC_FILE"
            
    local SIZE=$1
    if [ -z "$SIZE" ]; then
        SIZE=$FILE_SIZE           #   "1MB"
    fi
    local TMP_FILE="/tmp/testfile"
    echo "Chek is file exists"
    echo "edg-gridftp-exists $dpm_SE1/$DPM_SRC_FILE"
    edg-gridftp-exists $dpm_SE1/$DPM_SRC_FILE
    if [ $? == 0 ]; then
        echo "File $DPM_SRC_FILE  - exists"
        return 0
    fi
                                                                                
    echo "Creating $SIZE temporary test file for transfer"
    echo "dd if=/dev/zero of=$TMP_FILE bs=$SIZE count=1"
    dd if=/dev/zero of=$TMP_FILE bs=$SIZE count=1 &> /dev/null
    du -sk $TMP_FILE
    # Upload to a SE
                    
    echo "Run:globus-url-copy file:/$TMP_FILE $GSIFTP"
    globus-url-copy file:$TMP_FILE $GSIFTP
    if [ $? != 0 ]; then
       return 1
    fi
    echo "Check copy result"
    echo "Run: edg-gridftp-exists $dpm_SE1/$DPM_SRC_FILE"
    edg-gridftp-exists $dpm_SE1/$DPM_SRC_FILE
  if [ $? != 0 ]; then
        echo "File $TMP_FILE  to $dpm_SE1/$DPM_SRC_FILE is not created"
        return 1
   else
       echo "File created as $dpm_SE1/$DPM_SRC_FILE"
   fi
   return 0
}
#-------------------------------------------------
function get_source_file()
{
  export source_file=$GSIFTP
}
#----------------------------------------------
function get_dest_file()
{
    echo "get_dest_file()"
    export dest_file="$dpm_SE2/$DPM_DST_FILE"
}
#-------------------------------------------------
function submit()
{
    echo ""
    echo "submit($1 $2)"

    local fjson=$SRC$1$del$DST$2$END
    local temp=`mktemp submission-XXXXXX.json`
    local result=`mktemp result-XXXXXX.json`
    echo "File $temp"
    echo ""
    echo $fjson > $temp
    cat $temp 
    
    echo ""
    echo "Run: curl --capath /etc/grid-security/certificates/ --cert $X509_USER_PROXY --cacert $X509_USER_PROXY   https://$FTS3_HOST:$FTS3_REST_PORT/jobs -H \"Content-type: application/json\" -X POST -d@$temp"
    curl -s --capath /etc/grid-security/certificates/ \
        --cert $X509_USER_PROXY --cacert $X509_USER_PROXY \
        https://$FTS3_HOST:$FTS3_REST_PORT/jobs \
        -H "Content-type: application/json" -X POST -d@$temp > $result 
    res=$?
    echo "Exit code=$res"
    if [ $res != 0 ]; then
        echo "curl submission failed, exit code=$res"
        cat $fjson
        return 1
    fi

    echo "Extract job ID"
    export JID=`grep "job_id" $result |  cut -d"\"" -f4`
    if [ -z "$JID" ]; then
        cat $result
        echo "Job ID not pointed"
        return 1
    fi
    echo $JID

    rm $result $temp

    return 0
}
#-----------------------------------------------------------
function curl_transfer()
{
    echo ""
    echo "curl_transfer($1 $2)"
            
    submit $1 $2
    if [ $? != 0 ]; then
        echo "submit - Failed (Exit code)"
        return 1
    fi
                                        
    echo "JobID=$JID"
    echo "Check status jobiD"
                                                    
    poll_status_with_timeout $JID $TIME_OUT
    res=$?
    if [ $res != 0 ]; then
        echo "submit and curl-transfer-status - Failed"
        if [ "$res" == "4" ]; then
            echo "Time outed"
            return 4
        fi
        return $res
    fi
            
    echo "OK"
    return 0
}
#----------------------------------------------
#function job_cancel() 
#{ 
#    echo "job_cancel ($1)"
#    echo -e "\nRun:fts-transfer-cancel -s https://$FTS3_HOST:$FTS3_REST_PORT $1"
#    fts-transfer-cancel -s https://$FTS3_HOST:$FTS3_REST_PORT $1 > message
#}
#----------------------------------------------
#function jid-cancel() 
#{ 
#    echo -e "\nRun:fts-transfer-cancel -s https://$FTS3_HOST:$FTS3_REST_PORT $JID"
#    fts-transfer-cancel -s https://$FTS3_HOST:$FTS3_REST_PORT $JID
#}
#-----------------------------------------------------------
function job-cancel() 
{ 
    echo "job-cancel ($1)"
    echo "Run: curl --capath /etc/grid-security/certificates/ --cert $X509_USER_PROXY --cacert $X509_USER_PROXY   https://$FTS3_HOST:$FTS3_REST_PORT/jobs/$1 X DELETE"
    curl -s --capath /etc/grid-security/certificates/ \
        --cert $X509_USER_PROXY --cacert $X509_USER_PROXY \
        https://$FTS3_HOST:$FTS3_REST_PORT/jobs/$1 -X DELETE
    res=$?
    if [ $res != 0 ]; then
        echo "curl-job-cancel - failed (Exit cod = $res)"
        return $res
    fi
    return 0
}
#------------------------------------------------- 
function is_status_valid()
{
    echo "is_status_valid($1)" 
    valid_status_list=(\
            "FAILED"        "CATALOGFAILED" "FINISHEDDIRTY" "CANCELED" \
            "FINISHED"      "SUBMITTED"     "PENDING"       "ACTIVE"        "CANCELING" \
            "WAITING"       "HOLD"          "DONE"          "READY"         "DONEWITHERRORS")
    for item in ${valid_status_list[*]}
    do
        #echo $item
        if test  $1 == $item
        then
            echo "Status $1 - valid"
            return 0
        fi
    done
    return 1 
}
#------------------------------
function get_status_result()
{
    echo "get_status-result($1)"
    local SubId=$1
    echo "JobID=$SubId"
    previous_status="None"
    echo "Run: curl --capath /etc/grid-security/certificates/ --cert $X509_USER_PROXY --cacert $X509_USER_PROXY   https://$FTS3_HOST:$FTS3_REST_PORT/jobs/$1"
    response=`curl -s --capath /etc/grid-security/certificates/ \
        --cert $X509_USER_PROXY --cacert $X509_USER_PROXY \
        https://$FTS3_HOST:$FTS3_REST_PORT/jobs/$1`
    res=$?
    #echo "Exit code=$res"
    if [ $res != 0 ]; then
        echo "curl get status - failed, exit code=$res"
        return 99
    fi

    #cat tmp-message
    echo "Extract status"
    status=`echo "$response" | grep "job_state"`
    if [ $? != 0 ]; then
        echo $response
        echo "Job status not pointed"
        return 1
    fi
    echo $status
    status=`echo $status | cut -d"\"" -f4`
    echo $status
    
    is_status_valid $status
    if [ $? != 0 ]; then
      echo "Status $status - invalid value"
      return 1
    fi
    export STATUS=$status
     echo "status is $status"
    if test  $status == "FINISHED"
    then
      echo "Job is successfully finished." 
      return 0
    elif test $status == "FAILED"
    then
       echo "Job is Failed" 
       return 3 
    elif test $status == "HOLD"
    then
       echo "Job is Hold"
       return 4
    elif test $status == "SUBMITTED"
    then
       echo "Job is Submitted"
       return 4
    elif test $status == "READY"
    then
       echo "Job is Ready"
       return 4
    elif test $status == "PENDING"
    then
       echo "Job is Pending"
       return 4
    elif test $status == "DONE"
    then
       echo "Job is Done"
       return 0
    elif test $status == "ACTIVE"
    then
      echo "Job is Active"
      return 4        
    elif test $status == "CANCELING"
    then
      echo "Job is Canceling"
      return 5
    elif test $status == "CANCELED"
    then
      echo "Job is Canceled"
      return 6
    elif test $status == "FINISHEDDIRTY"
    then
      echo "Job is finished dirty"
      return 7
    else
      echo "Job status unknown: $status"
      return 1
    fi
}
#---------------------------------------------------
function poll_status_with_timeout()
{
    echo "poll_status_with-timeout($1 $2)"
    local SUBID=$1
    local Timeout=$2
    echo "Checking status for job ID: $SUBID" 
    previous_status="None"
    t=0
    while test $t -lt $Timeout
    do
       get_status_result $SUBID
       status=$?
        echo $status
        if [ "$status" -eq 1 ]; then
            echo "error retrieving the status with get_status_result()"
            return 1
        fi
        if [ "$status" -eq 0 ]; then
            echo "Job finished or done"
            return 0
        fi
        if [ "$status" -eq 3 ]; then
            echo "Job failed"
            return 3
        fi
        if [ "$status" -eq 6 ]; then
            echo "Job Canceled"
            return 6
        fi
        if [ "$status" -eq 99 ]; then
            echo "exit code fts-transfer-sumit !-0"
            return 99
        fi
        if [ "$status" -eq 4 ]; then
            echo "Waiting for status changes" 
            sleep 10
            t=`expr $t + 10`
            echo "Time is $t timeout is $Timeout"  
        fi
        if [ "$t" -eq "$Timeout" ]; then
            echo "Exceded timeout of $Timeout seconds"
            return 4
        else
            continue
        fi
    done
}      
