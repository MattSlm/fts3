/* ftsStub.h
   Generated by gSOAP 2.7.13 from fts3-transfer-submit.h
   Copyright(C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef ftsStub_H
#define ftsStub_H
#include <vector>
#ifndef WITH_NONAMESPACES
#define WITH_NONAMESPACES
#endif
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not redeclare here */

#endif

#if 0 /* volatile type: do not redeclare here */

#endif

#ifndef SOAP_TYPE_transfer__TransferParams
#define SOAP_TYPE_transfer__TransferParams (8)
/* transfer:TransferParams */
class SOAP_CMAC transfer__TransferParams
{
public:
	std::vector<std::string >keys;	/* optional element of type xsd:string */
	std::vector<std::string >values;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE_transfer__TransferParams */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         transfer__TransferParams() : soap(NULL) { }
	virtual ~transfer__TransferParams() { }
};
#endif

#ifndef SOAP_TYPE_transfer__PlacementJob
#define SOAP_TYPE_transfer__PlacementJob (9)
/* transfer:PlacementJob */
class SOAP_CMAC transfer__PlacementJob
{
public:
	std::vector<std::string >logicalFiles;	/* optional element of type xsd:string */
	std::string *sourceSE;	/* optional element of type xsd:string */
	std::string *destSE;	/* optional element of type xsd:string */
	transfer__TransferParams *jobParams;	/* optional element of type transfer:TransferParams */
	std::string *credential;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique id SOAP_TYPE_transfer__PlacementJob */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         transfer__PlacementJob() : sourceSE(NULL), destSE(NULL), jobParams(NULL), credential(NULL), soap(NULL) { }
	virtual ~transfer__PlacementJob() { }
};
#endif

#ifndef SOAP_TYPE_transfer__TransferException
#define SOAP_TYPE_transfer__TransferException (10)
/* transfer:TransferException */
class SOAP_CMAC transfer__TransferException
{
public:
	std::string *message;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE_transfer__TransferException */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         transfer__TransferException() : message(NULL), soap(NULL) { }
	virtual ~transfer__TransferException() { }
};
#endif

#ifndef SOAP_TYPE_transfer__TransferJobElement
#define SOAP_TYPE_transfer__TransferJobElement (15)
/* transfer:TransferJobElement */
class SOAP_CMAC transfer__TransferJobElement
{
public:
	std::string *source;	/* optional element of type xsd:string */
	std::string *dest;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE_transfer__TransferJobElement */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         transfer__TransferJobElement() : source(NULL), dest(NULL), soap(NULL) { }
	virtual ~transfer__TransferJobElement() { }
};
#endif

#ifndef SOAP_TYPE_transfer__TransferJob
#define SOAP_TYPE_transfer__TransferJob (16)
/* transfer:TransferJob */
class SOAP_CMAC transfer__TransferJob
{
public:
	std::vector<transfer__TransferJobElement * >transferJobElements;	/* optional element of type transfer:TransferJobElement */
	transfer__TransferParams *jobParams;	/* optional element of type transfer:TransferParams */
	std::string *credential;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE_transfer__TransferJob */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         transfer__TransferJob() : jobParams(NULL), credential(NULL), soap(NULL) { }
	virtual ~transfer__TransferJob() { }
};
#endif

#ifndef SOAP_TYPE_transfer__TransferJobElement2
#define SOAP_TYPE_transfer__TransferJobElement2 (17)
/* transfer:TransferJobElement2 */
class SOAP_CMAC transfer__TransferJobElement2
{
public:
	std::string *source;	/* optional element of type xsd:string */
	std::string *dest;	/* optional element of type xsd:string */
	std::string *checksum;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE_transfer__TransferJobElement2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         transfer__TransferJobElement2() : source(NULL), dest(NULL), checksum(NULL), soap(NULL) { }
	virtual ~transfer__TransferJobElement2() { }
};
#endif

#ifndef SOAP_TYPE_transfer__TransferJob2
#define SOAP_TYPE_transfer__TransferJob2 (18)
/* transfer:TransferJob2 */
class SOAP_CMAC transfer__TransferJob2
{
public:
	std::vector<transfer__TransferJobElement2 * >transferJobElements;	/* optional element of type transfer:TransferJobElement2 */
	transfer__TransferParams *jobParams;	/* optional element of type transfer:TransferParams */
	std::string *credential;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE_transfer__TransferJob2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         transfer__TransferJob2() : jobParams(NULL), credential(NULL), soap(NULL) { }
	virtual ~transfer__TransferJob2() { }
};
#endif

#ifndef SOAP_TYPE_transfer__JobStatus
#define SOAP_TYPE_transfer__JobStatus (19)
/* transfer:JobStatus */
class SOAP_CMAC transfer__JobStatus
{
public:
	std::string *jobID;	/* optional element of type xsd:string */
	std::string *jobStatus;	/* optional element of type xsd:string */
	std::string *clientDN;	/* optional element of type xsd:string */
	std::string *reason;	/* optional element of type xsd:string */
	std::string *voName;	/* optional element of type xsd:string */
	LONG64 submitTime;	/* required element of type xsd:long */
	int numFiles;	/* required element of type xsd:int */
	int priority;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE_transfer__JobStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         transfer__JobStatus() : jobID(NULL), jobStatus(NULL), clientDN(NULL), reason(NULL), voName(NULL), submitTime(0), numFiles(0), priority(0), soap(NULL) { }
	virtual ~transfer__JobStatus() { }
};
#endif

#ifndef SOAP_TYPE_transfer__FileTransferStatus
#define SOAP_TYPE_transfer__FileTransferStatus (20)
/* transfer:FileTransferStatus */
class SOAP_CMAC transfer__FileTransferStatus
{
public:
	std::string *logicalName;	/* optional element of type xsd:string */
	std::string *sourceSURL;	/* optional element of type xsd:string */
	std::string *destSURL;	/* optional element of type xsd:string */
	std::string *transferFileState;	/* optional element of type xsd:string */
	int numFailures;	/* required element of type xsd:int */
	std::string *reason;	/* optional element of type xsd:string */
	std::string *reason_USCOREclass;	/* optional element of type xsd:string */
	LONG64 duration;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 20; } /* = unique id SOAP_TYPE_transfer__FileTransferStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         transfer__FileTransferStatus() : logicalName(NULL), sourceSURL(NULL), destSURL(NULL), transferFileState(NULL), numFailures(0), reason(NULL), reason_USCOREclass(NULL), duration(0), soap(NULL) { }
	virtual ~transfer__FileTransferStatus() { }
};
#endif

#ifndef SOAP_TYPE_transfer__TransferJobSummary
#define SOAP_TYPE_transfer__TransferJobSummary (23)
/* transfer:TransferJobSummary */
class SOAP_CMAC transfer__TransferJobSummary
{
public:
	transfer__JobStatus *jobStatus;	/* optional element of type transfer:JobStatus */
	int numDone;	/* required element of type xsd:int */
	int numActive;	/* required element of type xsd:int */
	int numPending;	/* required element of type xsd:int */
	int numCanceled;	/* required element of type xsd:int */
	int numCanceling;	/* required element of type xsd:int */
	int numFailed;	/* required element of type xsd:int */
	int numFinished;	/* required element of type xsd:int */
	int numSubmitted;	/* required element of type xsd:int */
	int numHold;	/* required element of type xsd:int */
	int numWaiting;	/* required element of type xsd:int */
	int numCatalogFailed;	/* required element of type xsd:int */
	int numRestarted;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 23; } /* = unique id SOAP_TYPE_transfer__TransferJobSummary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         transfer__TransferJobSummary() : jobStatus(NULL), numDone(0), numActive(0), numPending(0), numCanceled(0), numCanceling(0), numFailed(0), numFinished(0), numSubmitted(0), numHold(0), numWaiting(0), numCatalogFailed(0), numRestarted(0), soap(NULL) { }
	virtual ~transfer__TransferJobSummary() { }
};
#endif

#ifndef SOAP_TYPE_transfer__StringPair
#define SOAP_TYPE_transfer__StringPair (27)
/* transfer:StringPair */
class SOAP_CMAC transfer__StringPair
{
public:
	std::string *string1;	/* optional element of type xsd:string */
	std::string *string2;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 27; } /* = unique id SOAP_TYPE_transfer__StringPair */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         transfer__StringPair() : string1(NULL), string2(NULL), soap(NULL) { }
	virtual ~transfer__StringPair() { }
};
#endif

#ifndef SOAP_TYPE_transfer__Roles
#define SOAP_TYPE_transfer__Roles (28)
/* transfer:Roles */
class SOAP_CMAC transfer__Roles
{
public:
	std::string *clientDN;	/* optional element of type xsd:string */
	std::string *serviceAdmin;	/* optional element of type xsd:string */
	std::string *submitter;	/* optional element of type xsd:string */
	std::vector<transfer__StringPair * >VOManager;	/* optional element of type transfer:StringPair */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 28; } /* = unique id SOAP_TYPE_transfer__Roles */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         transfer__Roles() : clientDN(NULL), serviceAdmin(NULL), submitter(NULL), soap(NULL) { }
	virtual ~transfer__Roles() { }
};
#endif

#ifndef SOAP_TYPE_fts__ArrayOf_USCOREsoapenc_USCOREstring
#define SOAP_TYPE_fts__ArrayOf_USCOREsoapenc_USCOREstring (29)
/* fts:ArrayOf_soapenc_string */
class SOAP_CMAC fts__ArrayOf_USCOREsoapenc_USCOREstring
{
public:
	std::vector<std::string >item;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 29; } /* = unique id SOAP_TYPE_fts__ArrayOf_USCOREsoapenc_USCOREstring */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         fts__ArrayOf_USCOREsoapenc_USCOREstring() : soap(NULL) { }
	virtual ~fts__ArrayOf_USCOREsoapenc_USCOREstring() { }
};
#endif

#ifndef SOAP_TYPE_fts__ArrayOf_USCOREtns3_USCOREJobStatus
#define SOAP_TYPE_fts__ArrayOf_USCOREtns3_USCOREJobStatus (30)
/* fts:ArrayOf_tns3_JobStatus */
class SOAP_CMAC fts__ArrayOf_USCOREtns3_USCOREJobStatus
{
public:
	std::vector<transfer__JobStatus * >item;	/* optional element of type transfer:JobStatus */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 30; } /* = unique id SOAP_TYPE_fts__ArrayOf_USCOREtns3_USCOREJobStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         fts__ArrayOf_USCOREtns3_USCOREJobStatus() : soap(NULL) { }
	virtual ~fts__ArrayOf_USCOREtns3_USCOREJobStatus() { }
};
#endif

#ifndef SOAP_TYPE_fts__ArrayOf_USCOREtns3_USCOREFileTransferStatus
#define SOAP_TYPE_fts__ArrayOf_USCOREtns3_USCOREFileTransferStatus (31)
/* fts:ArrayOf_tns3_FileTransferStatus */
class SOAP_CMAC fts__ArrayOf_USCOREtns3_USCOREFileTransferStatus
{
public:
	std::vector<transfer__FileTransferStatus * >item;	/* optional element of type transfer:FileTransferStatus */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 31; } /* = unique id SOAP_TYPE_fts__ArrayOf_USCOREtns3_USCOREFileTransferStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         fts__ArrayOf_USCOREtns3_USCOREFileTransferStatus() : soap(NULL) { }
	virtual ~fts__ArrayOf_USCOREtns3_USCOREFileTransferStatus() { }
};
#endif

#ifndef SOAP_TYPE_fts__ArrayOf_USCOREtns3_USCOREFileTransferStatus2
#define SOAP_TYPE_fts__ArrayOf_USCOREtns3_USCOREFileTransferStatus2 (32)
/* fts:ArrayOf_tns3_FileTransferStatus2 */
class SOAP_CMAC fts__ArrayOf_USCOREtns3_USCOREFileTransferStatus2
{
public:
	std::vector<class transfer__FileTransferStatus2 * >item;	/* optional element of type transfer:FileTransferStatus2 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 32; } /* = unique id SOAP_TYPE_fts__ArrayOf_USCOREtns3_USCOREFileTransferStatus2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         fts__ArrayOf_USCOREtns3_USCOREFileTransferStatus2() : soap(NULL) { }
	virtual ~fts__ArrayOf_USCOREtns3_USCOREFileTransferStatus2() { }
};
#endif

#ifndef SOAP_TYPE_transfer__InvalidArgumentException
#define SOAP_TYPE_transfer__InvalidArgumentException (11)
/* transfer:InvalidArgumentException */
class SOAP_CMAC transfer__InvalidArgumentException : public transfer__TransferException
{
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE_transfer__InvalidArgumentException */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         transfer__InvalidArgumentException()  { }
	virtual ~transfer__InvalidArgumentException() { }
};
#endif

#ifndef SOAP_TYPE_transfer__AuthorizationException
#define SOAP_TYPE_transfer__AuthorizationException (12)
/* transfer:AuthorizationException */
class SOAP_CMAC transfer__AuthorizationException : public transfer__TransferException
{
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_transfer__AuthorizationException */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         transfer__AuthorizationException()  { }
	virtual ~transfer__AuthorizationException() { }
};
#endif

#ifndef SOAP_TYPE_transfer__ServiceBusyException
#define SOAP_TYPE_transfer__ServiceBusyException (13)
/* transfer:ServiceBusyException */
class SOAP_CMAC transfer__ServiceBusyException : public transfer__TransferException
{
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE_transfer__ServiceBusyException */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         transfer__ServiceBusyException()  { }
	virtual ~transfer__ServiceBusyException() { }
};
#endif

#ifndef SOAP_TYPE_transfer__InternalException
#define SOAP_TYPE_transfer__InternalException (14)
/* transfer:InternalException */
class SOAP_CMAC transfer__InternalException : public transfer__TransferException
{
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_transfer__InternalException */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         transfer__InternalException()  { }
	virtual ~transfer__InternalException() { }
};
#endif

#ifndef SOAP_TYPE_transfer__NotExistsException
#define SOAP_TYPE_transfer__NotExistsException (21)
/* transfer:NotExistsException */
class SOAP_CMAC transfer__NotExistsException : public transfer__TransferException
{
public:
	virtual int soap_type() const { return 21; } /* = unique id SOAP_TYPE_transfer__NotExistsException */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         transfer__NotExistsException()  { }
	virtual ~transfer__NotExistsException() { }
};
#endif

#ifndef SOAP_TYPE_transfer__FileTransferStatus2
#define SOAP_TYPE_transfer__FileTransferStatus2 (22)
/* transfer:FileTransferStatus2 */
class SOAP_CMAC transfer__FileTransferStatus2 : public transfer__FileTransferStatus
{
public:
	std::string *error_USCOREscope;	/* optional element of type xsd:string */
	std::string *error_USCOREphase;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 22; } /* = unique id SOAP_TYPE_transfer__FileTransferStatus2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         transfer__FileTransferStatus2() : error_USCOREscope(NULL), error_USCOREphase(NULL) { }
	virtual ~transfer__FileTransferStatus2() { }
};
#endif

#ifndef SOAP_TYPE_transfer__TransferJobSummary2
#define SOAP_TYPE_transfer__TransferJobSummary2 (24)
/* transfer:TransferJobSummary2 */
class SOAP_CMAC transfer__TransferJobSummary2 : public transfer__TransferJobSummary
{
public:
	int numReady;	/* required element of type xsd:int */
	int numFinishing;	/* required element of type xsd:int */
	int numAwaitingPrestage;	/* required element of type xsd:int */
	int numPrestaging;	/* required element of type xsd:int */
	int numWaitingCatalogRegistration;	/* required element of type xsd:int */
	int numWaitingCatalogResolution;	/* required element of type xsd:int */
	int numWaitingPrestage;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 24; } /* = unique id SOAP_TYPE_transfer__TransferJobSummary2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         transfer__TransferJobSummary2() : numReady(0), numFinishing(0), numAwaitingPrestage(0), numPrestaging(0), numWaitingCatalogRegistration(0), numWaitingCatalogResolution(0), numWaitingPrestage(0) { }
	virtual ~transfer__TransferJobSummary2() { }
};
#endif

#ifndef SOAP_TYPE_transfer__CannotCancelException
#define SOAP_TYPE_transfer__CannotCancelException (25)
/* transfer:CannotCancelException */
class SOAP_CMAC transfer__CannotCancelException : public transfer__TransferException
{
public:
	virtual int soap_type() const { return 25; } /* = unique id SOAP_TYPE_transfer__CannotCancelException */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         transfer__CannotCancelException()  { }
	virtual ~transfer__CannotCancelException() { }
};
#endif

#ifndef SOAP_TYPE_transfer__ExistsException
#define SOAP_TYPE_transfer__ExistsException (26)
/* transfer:ExistsException */
class SOAP_CMAC transfer__ExistsException : public transfer__TransferException
{
public:
	virtual int soap_type() const { return 26; } /* = unique id SOAP_TYPE_transfer__ExistsException */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         transfer__ExistsException()  { }
	virtual ~transfer__ExistsException() { }
};
#endif

#ifndef SOAP_TYPE_fts__placementSubmitResponse
#define SOAP_TYPE_fts__placementSubmitResponse (51)
/* fts:placementSubmitResponse */
struct fts__placementSubmitResponse
{
public:
	std::string _placementSubmitReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts__placementSubmit
#define SOAP_TYPE_fts__placementSubmit (55)
/* fts:placementSubmit */
struct fts__placementSubmit
{
public:
	transfer__PlacementJob *_job;	/* optional element of type transfer:PlacementJob */
};
#endif

#ifndef SOAP_TYPE_fts__placementSubmit2Response
#define SOAP_TYPE_fts__placementSubmit2Response (56)
/* fts:placementSubmit2Response */
struct fts__placementSubmit2Response
{
public:
	std::string _placementSubmit2Return;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts__placementSubmit2
#define SOAP_TYPE_fts__placementSubmit2 (59)
/* fts:placementSubmit2 */
struct fts__placementSubmit2
{
public:
	transfer__PlacementJob *_job;	/* optional element of type transfer:PlacementJob */
};
#endif

#ifndef SOAP_TYPE_fts__transferSubmitResponse
#define SOAP_TYPE_fts__transferSubmitResponse (60)
/* fts:transferSubmitResponse */
struct fts__transferSubmitResponse
{
public:
	std::string _transferSubmitReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts__transferSubmit
#define SOAP_TYPE_fts__transferSubmit (64)
/* fts:transferSubmit */
struct fts__transferSubmit
{
public:
	transfer__TransferJob *_job;	/* optional element of type transfer:TransferJob */
};
#endif

#ifndef SOAP_TYPE_fts__transferSubmit2Response
#define SOAP_TYPE_fts__transferSubmit2Response (65)
/* fts:transferSubmit2Response */
struct fts__transferSubmit2Response
{
public:
	std::string _transferSubmit2Return;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts__transferSubmit2
#define SOAP_TYPE_fts__transferSubmit2 (68)
/* fts:transferSubmit2 */
struct fts__transferSubmit2
{
public:
	transfer__TransferJob *_job;	/* optional element of type transfer:TransferJob */
};
#endif

#ifndef SOAP_TYPE_fts__transferSubmit3Response
#define SOAP_TYPE_fts__transferSubmit3Response (69)
/* fts:transferSubmit3Response */
struct fts__transferSubmit3Response
{
public:
	std::string _transferSubmit3Return;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts__transferSubmit3
#define SOAP_TYPE_fts__transferSubmit3 (73)
/* fts:transferSubmit3 */
struct fts__transferSubmit3
{
public:
	transfer__TransferJob2 *_job;	/* optional element of type transfer:TransferJob2 */
};
#endif

#ifndef SOAP_TYPE_fts__submitResponse
#define SOAP_TYPE_fts__submitResponse (74)
/* fts:submitResponse */
struct fts__submitResponse
{
public:
	std::string _submitReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts__submit
#define SOAP_TYPE_fts__submit (77)
/* fts:submit */
struct fts__submit
{
public:
	transfer__TransferJob *_job;	/* optional element of type transfer:TransferJob */
};
#endif

#ifndef SOAP_TYPE_fts__listRequestsResponse
#define SOAP_TYPE_fts__listRequestsResponse (78)
/* fts:listRequestsResponse */
struct fts__listRequestsResponse
{
public:
	fts__ArrayOf_USCOREtns3_USCOREJobStatus *_listRequestsReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type fts:ArrayOf_tns3_JobStatus */
};
#endif

#ifndef SOAP_TYPE_fts__listRequests
#define SOAP_TYPE_fts__listRequests (83)
/* fts:listRequests */
struct fts__listRequests
{
public:
	fts__ArrayOf_USCOREsoapenc_USCOREstring *_inGivenStates;	/* optional element of type fts:ArrayOf_soapenc_string */
};
#endif

#ifndef SOAP_TYPE_fts__listRequests2Response
#define SOAP_TYPE_fts__listRequests2Response (84)
/* fts:listRequests2Response */
struct fts__listRequests2Response
{
public:
	fts__ArrayOf_USCOREtns3_USCOREJobStatus *_listRequests2Return;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type fts:ArrayOf_tns3_JobStatus */
};
#endif

#ifndef SOAP_TYPE_fts__listRequests2
#define SOAP_TYPE_fts__listRequests2 (87)
/* fts:listRequests2 */
struct fts__listRequests2
{
public:
	fts__ArrayOf_USCOREsoapenc_USCOREstring *_inGivenStates;	/* optional element of type fts:ArrayOf_soapenc_string */
	std::string _forDN;	/* required element of type xsd:string */
	std::string _forVO;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts__getFileStatusResponse
#define SOAP_TYPE_fts__getFileStatusResponse (88)
/* fts:getFileStatusResponse */
struct fts__getFileStatusResponse
{
public:
	fts__ArrayOf_USCOREtns3_USCOREFileTransferStatus *_getFileStatusReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type fts:ArrayOf_tns3_FileTransferStatus */
};
#endif

#ifndef SOAP_TYPE_fts__getFileStatus
#define SOAP_TYPE_fts__getFileStatus (92)
/* fts:getFileStatus */
struct fts__getFileStatus
{
public:
	std::string _requestID;	/* required element of type xsd:string */
	int _offset;	/* required element of type xsd:int */
	int _limit;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_fts__getFileStatus2Response
#define SOAP_TYPE_fts__getFileStatus2Response (93)
/* fts:getFileStatus2Response */
struct fts__getFileStatus2Response
{
public:
	fts__ArrayOf_USCOREtns3_USCOREFileTransferStatus2 *_getFileStatus2Return;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type fts:ArrayOf_tns3_FileTransferStatus2 */
};
#endif

#ifndef SOAP_TYPE_fts__getFileStatus2
#define SOAP_TYPE_fts__getFileStatus2 (97)
/* fts:getFileStatus2 */
struct fts__getFileStatus2
{
public:
	std::string _requestID;	/* required element of type xsd:string */
	int _offset;	/* required element of type xsd:int */
	int _limit;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_fts__getTransferJobStatusResponse
#define SOAP_TYPE_fts__getTransferJobStatusResponse (98)
/* fts:getTransferJobStatusResponse */
struct fts__getTransferJobStatusResponse
{
public:
	transfer__JobStatus *_getTransferJobStatusReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type transfer:JobStatus */
};
#endif

#ifndef SOAP_TYPE_fts__getTransferJobStatus
#define SOAP_TYPE_fts__getTransferJobStatus (101)
/* fts:getTransferJobStatus */
struct fts__getTransferJobStatus
{
public:
	std::string _requestID;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts__getTransferJobSummaryResponse
#define SOAP_TYPE_fts__getTransferJobSummaryResponse (102)
/* fts:getTransferJobSummaryResponse */
struct fts__getTransferJobSummaryResponse
{
public:
	transfer__TransferJobSummary *_getTransferJobSummaryReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type transfer:TransferJobSummary */
};
#endif

#ifndef SOAP_TYPE_fts__getTransferJobSummary
#define SOAP_TYPE_fts__getTransferJobSummary (106)
/* fts:getTransferJobSummary */
struct fts__getTransferJobSummary
{
public:
	std::string _requestID;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts__getTransferJobSummary2Response
#define SOAP_TYPE_fts__getTransferJobSummary2Response (107)
/* fts:getTransferJobSummary2Response */
struct fts__getTransferJobSummary2Response
{
public:
	transfer__TransferJobSummary2 *_getTransferJobSummary2Return;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type transfer:TransferJobSummary2 */
};
#endif

#ifndef SOAP_TYPE_fts__getTransferJobSummary2
#define SOAP_TYPE_fts__getTransferJobSummary2 (111)
/* fts:getTransferJobSummary2 */
struct fts__getTransferJobSummary2
{
public:
	std::string _requestID;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts__cancelResponse
#define SOAP_TYPE_fts__cancelResponse (112)
/* fts:cancelResponse */
struct fts__cancelResponse
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_fts__cancel
#define SOAP_TYPE_fts__cancel (115)
/* fts:cancel */
struct fts__cancel
{
public:
	fts__ArrayOf_USCOREsoapenc_USCOREstring *_requestIDs;	/* optional element of type fts:ArrayOf_soapenc_string */
};
#endif

#ifndef SOAP_TYPE_fts__setJobPriorityResponse
#define SOAP_TYPE_fts__setJobPriorityResponse (116)
/* fts:setJobPriorityResponse */
struct fts__setJobPriorityResponse
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_fts__setJobPriority
#define SOAP_TYPE_fts__setJobPriority (119)
/* fts:setJobPriority */
struct fts__setJobPriority
{
public:
	std::string _requestID;	/* required element of type xsd:string */
	int _priority;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_fts__addVOManagerResponse
#define SOAP_TYPE_fts__addVOManagerResponse (120)
/* fts:addVOManagerResponse */
struct fts__addVOManagerResponse
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_fts__addVOManager
#define SOAP_TYPE_fts__addVOManager (123)
/* fts:addVOManager */
struct fts__addVOManager
{
public:
	std::string _VOName;	/* required element of type xsd:string */
	std::string _principal;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts__removeVOManagerResponse
#define SOAP_TYPE_fts__removeVOManagerResponse (124)
/* fts:removeVOManagerResponse */
struct fts__removeVOManagerResponse
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_fts__removeVOManager
#define SOAP_TYPE_fts__removeVOManager (127)
/* fts:removeVOManager */
struct fts__removeVOManager
{
public:
	std::string _VOName;	/* required element of type xsd:string */
	std::string _principal;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts__listVOManagersResponse
#define SOAP_TYPE_fts__listVOManagersResponse (128)
/* fts:listVOManagersResponse */
struct fts__listVOManagersResponse
{
public:
	fts__ArrayOf_USCOREsoapenc_USCOREstring *_listVOManagersReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type fts:ArrayOf_soapenc_string */
};
#endif

#ifndef SOAP_TYPE_fts__listVOManagers
#define SOAP_TYPE_fts__listVOManagers (131)
/* fts:listVOManagers */
struct fts__listVOManagers
{
public:
	std::string _VOName;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts__getRolesResponse
#define SOAP_TYPE_fts__getRolesResponse (132)
/* fts:getRolesResponse */
struct fts__getRolesResponse
{
public:
	transfer__Roles *getRolesReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type transfer:Roles */
};
#endif

#ifndef SOAP_TYPE_fts__getRoles
#define SOAP_TYPE_fts__getRoles (136)
/* fts:getRoles */
struct fts__getRoles
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_fts__getRolesOfResponse
#define SOAP_TYPE_fts__getRolesOfResponse (137)
/* fts:getRolesOfResponse */
struct fts__getRolesOfResponse
{
public:
	transfer__Roles *_getRolesOfReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type transfer:Roles */
};
#endif

#ifndef SOAP_TYPE_fts__getRolesOf
#define SOAP_TYPE_fts__getRolesOf (140)
/* fts:getRolesOf */
struct fts__getRolesOf
{
public:
	std::string _otherDN;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts__getVersionResponse
#define SOAP_TYPE_fts__getVersionResponse (141)
/* fts:getVersionResponse */
struct fts__getVersionResponse
{
public:
	std::string getVersionReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts__getVersion
#define SOAP_TYPE_fts__getVersion (144)
/* fts:getVersion */
struct fts__getVersion
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_fts__getSchemaVersionResponse
#define SOAP_TYPE_fts__getSchemaVersionResponse (145)
/* fts:getSchemaVersionResponse */
struct fts__getSchemaVersionResponse
{
public:
	std::string getSchemaVersionReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts__getSchemaVersion
#define SOAP_TYPE_fts__getSchemaVersion (148)
/* fts:getSchemaVersion */
struct fts__getSchemaVersion
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_fts__getInterfaceVersionResponse
#define SOAP_TYPE_fts__getInterfaceVersionResponse (149)
/* fts:getInterfaceVersionResponse */
struct fts__getInterfaceVersionResponse
{
public:
	std::string getInterfaceVersionReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts__getInterfaceVersion
#define SOAP_TYPE_fts__getInterfaceVersion (152)
/* fts:getInterfaceVersion */
struct fts__getInterfaceVersion
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_fts__getServiceMetadataResponse
#define SOAP_TYPE_fts__getServiceMetadataResponse (153)
/* fts:getServiceMetadataResponse */
struct fts__getServiceMetadataResponse
{
public:
	std::string _getServiceMetadataReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_fts__getServiceMetadata
#define SOAP_TYPE_fts__getServiceMetadata (156)
/* fts:getServiceMetadata */
struct fts__getServiceMetadata
{
public:
	std::string _key;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (157)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (158)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (160)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (163)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (164)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of ftsStub.h */
