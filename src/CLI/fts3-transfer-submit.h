/* fts3-transfer-submit
   Generated by wsdl2h 1.2.13 from org.glite.data-fts-3.7.0.wsdl and typemap.dat
   2012-01-27 13:14:49 GMT
   gSOAP XML Web services tools.
   Copyright (C) 2001-2009 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/* NOTE:

 - Compile this file with soapcpp2 to complete the code generation process.
 - Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) to browse this file.
 - Use wsdl2h option -l to view the software license terms.

   DO NOT include this file directly into your project.
   Include only the soapcpp2-generated headers and source code files.
*/

//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * http://glite.org/wsdl/services/org.glite.data.transfer.fts                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to disable)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

fts = "http://glite.org/wsdl/services/org.glite.data.transfer.fts"
transfer = "http://transfer.data.glite.org"

*/

//gsoap transfer schema namespace:	http://transfer.data.glite.org
//gsoap fts   schema namespace:	http://glite.org/wsdl/services/org.glite.data.transfer.fts
//gsoap transfer schema form:	unqualified
//gsoap fts   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Schema Types                                                               *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class transfer__TransferParams.
class transfer__TransferParams;

//  Forward declaration of class transfer__PlacementJob.
class transfer__PlacementJob;

//  Forward declaration of class transfer__TransferException.
class transfer__TransferException;

//  Forward declaration of class transfer__InvalidArgumentException.
class transfer__InvalidArgumentException;

//  Forward declaration of class transfer__AuthorizationException.
class transfer__AuthorizationException;

//  Forward declaration of class transfer__ServiceBusyException.
class transfer__ServiceBusyException;

//  Forward declaration of class transfer__InternalException.
class transfer__InternalException;

//  Forward declaration of class transfer__TransferJobElement.
class transfer__TransferJobElement;

//  Forward declaration of class transfer__TransferJob.
class transfer__TransferJob;

//  Forward declaration of class transfer__TransferJobElement2.
class transfer__TransferJobElement2;

//  Forward declaration of class transfer__TransferJob2.
class transfer__TransferJob2;

//  Forward declaration of class transfer__JobStatus.
class transfer__JobStatus;

//  Forward declaration of class transfer__FileTransferStatus.
class transfer__FileTransferStatus;

//  Forward declaration of class transfer__NotExistsException.
class transfer__NotExistsException;

//  Forward declaration of class transfer__FileTransferStatus2.
class transfer__FileTransferStatus2;

//  Forward declaration of class transfer__TransferJobSummary.
class transfer__TransferJobSummary;

//  Forward declaration of class transfer__TransferJobSummary2.
class transfer__TransferJobSummary2;

//  Forward declaration of class transfer__CannotCancelException.
class transfer__CannotCancelException;

//  Forward declaration of class transfer__ExistsException.
class transfer__ExistsException;

//  Forward declaration of class transfer__StringPair.
class transfer__StringPair;

//  Forward declaration of class transfer__Roles.
class transfer__Roles;

//  Forward declaration of class fts__ArrayOf_USCOREsoapenc_USCOREstring.
class fts__ArrayOf_USCOREsoapenc_USCOREstring;

//  Forward declaration of class fts__ArrayOf_USCOREtns3_USCOREJobStatus.
class fts__ArrayOf_USCOREtns3_USCOREJobStatus;

//  Forward declaration of class fts__ArrayOf_USCOREtns3_USCOREFileTransferStatus.
class fts__ArrayOf_USCOREtns3_USCOREFileTransferStatus;

//  Forward declaration of class fts__ArrayOf_USCOREtns3_USCOREFileTransferStatus2.
class fts__ArrayOf_USCOREtns3_USCOREFileTransferStatus2;

/// "http://transfer.data.glite.org":TransferParams is a complexType.
class transfer__TransferParams
{ public:
/// Vector of std::string with length 1..unbounded
    std::vector<std::string            > keys                          ;	///< Nullable pointer.
/// Vector of std::string with length 1..unbounded
    std::vector<std::string            > values                        ;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://transfer.data.glite.org":PlacementJob is a complexType.
class transfer__PlacementJob
{ public:
/// Vector of std::string with length 1..unbounded
    std::vector<std::string            > logicalFiles                  ;	///< Nullable pointer.
/// Element sourceSE of type xs:string.
    std::string*                         sourceSE                      ;	///< Nullable pointer.
/// Element destSE of type xs:string.
    std::string*                         destSE                        ;	///< Nullable pointer.
/// Element jobParams of type "http://transfer.data.glite.org":TransferParams.
    transfer__TransferParams*            jobParams                     ;	///< Nullable pointer.
/// Element credential of type xs:string.
    std::string*                         credential                    ;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://transfer.data.glite.org":TransferException is a complexType.
class transfer__TransferException
{ public:
/// Element message of type xs:string.
    std::string*                         message                       ;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://transfer.data.glite.org":TransferJobElement is a complexType.
class transfer__TransferJobElement
{ public:
/// Element source of type xs:string.
    std::string*                         source                        ;	///< Nullable pointer.
/// Element dest of type xs:string.
    std::string*                         dest                          ;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://transfer.data.glite.org":TransferJob is a complexType.
class transfer__TransferJob
{ public:
/// Vector of transfer__TransferJobElement* with length 1..unbounded
    std::vector<transfer__TransferJobElement*> transferJobElements           ;	///< Nullable pointer.
/// Element jobParams of type "http://transfer.data.glite.org":TransferParams.
    transfer__TransferParams*            jobParams                     ;	///< Nullable pointer.
/// Element credential of type xs:string.
    std::string*                         credential                    ;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://transfer.data.glite.org":TransferJobElement2 is a complexType.
class transfer__TransferJobElement2
{ public:
/// Element source of type xs:string.
    std::string*                         source                        ;	///< Nullable pointer.
/// Element dest of type xs:string.
    std::string*                         dest                          ;	///< Nullable pointer.
/// Element checksum of type xs:string.
    std::string*                         checksum                      ;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://transfer.data.glite.org":TransferJob2 is a complexType.
class transfer__TransferJob2
{ public:
/// Vector of transfer__TransferJobElement2* with length 1..unbounded
    std::vector<transfer__TransferJobElement2*> transferJobElements           ;	///< Nullable pointer.
/// Element jobParams of type "http://transfer.data.glite.org":TransferParams.
    transfer__TransferParams*            jobParams                     ;	///< Nullable pointer.
/// Element credential of type xs:string.
    std::string*                         credential                    ;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://transfer.data.glite.org":JobStatus is a complexType.
class transfer__JobStatus
{ public:
/// Element jobID of type xs:string.
    std::string*                         jobID                         ;	///< Nullable pointer.
/// Element jobStatus of type xs:string.
    std::string*                         jobStatus                     ;	///< Nullable pointer.
/// Element clientDN of type xs:string.
    std::string*                         clientDN                      ;	///< Nullable pointer.
/// Element reason of type xs:string.
    std::string*                         reason                        ;	///< Nullable pointer.
/// Element voName of type xs:string.
    std::string*                         voName                        ;	///< Nullable pointer.
/// Element submitTime of type xs:long.
    LONG64                               submitTime                     1;	///< Required element.
/// Element numFiles of type xs:int.
    int                                  numFiles                       1;	///< Required element.
/// Element priority of type xs:int.
    int                                  priority                       1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://transfer.data.glite.org":FileTransferStatus is a complexType.
class transfer__FileTransferStatus
{ public:
/// Element logicalName of type xs:string.
    std::string*                         logicalName                   ;	///< Nullable pointer.
/// Element sourceSURL of type xs:string.
    std::string*                         sourceSURL                    ;	///< Nullable pointer.
/// Element destSURL of type xs:string.
    std::string*                         destSURL                      ;	///< Nullable pointer.
/// Element transferFileState of type xs:string.
    std::string*                         transferFileState             ;	///< Nullable pointer.
/// Element numFailures of type xs:int.
    int                                  numFailures                    1;	///< Required element.
/// Element reason of type xs:string.
    std::string*                         reason                        ;	///< Nullable pointer.
/// Element reason_class of type xs:string.
    std::string*                         reason_USCOREclass            ;	///< Nullable pointer.
/// Element duration of type xs:long.
    LONG64                               duration                       1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://transfer.data.glite.org":TransferJobSummary is a complexType.
class transfer__TransferJobSummary
{ public:
/// Element jobStatus of type "http://transfer.data.glite.org":JobStatus.
    transfer__JobStatus*                 jobStatus                     ;	///< Nullable pointer.
/// Element numDone of type xs:int.
    int                                  numDone                        1;	///< Required element.
/// Element numActive of type xs:int.
    int                                  numActive                      1;	///< Required element.
/// Element numPending of type xs:int.
    int                                  numPending                     1;	///< Required element.
/// Element numCanceled of type xs:int.
    int                                  numCanceled                    1;	///< Required element.
/// Element numCanceling of type xs:int.
    int                                  numCanceling                   1;	///< Required element.
/// Element numFailed of type xs:int.
    int                                  numFailed                      1;	///< Required element.
/// Element numFinished of type xs:int.
    int                                  numFinished                    1;	///< Required element.
/// Element numSubmitted of type xs:int.
    int                                  numSubmitted                   1;	///< Required element.
/// Element numHold of type xs:int.
    int                                  numHold                        1;	///< Required element.
/// Element numWaiting of type xs:int.
    int                                  numWaiting                     1;	///< Required element.
/// Element numCatalogFailed of type xs:int.
    int                                  numCatalogFailed               1;	///< Required element.
/// Element numRestarted of type xs:int.
    int                                  numRestarted                   1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://transfer.data.glite.org":StringPair is a complexType.
class transfer__StringPair
{ public:
/// Element string1 of type xs:string.
    std::string*                         string1                       ;	///< Nullable pointer.
/// Element string2 of type xs:string.
    std::string*                         string2                       ;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://transfer.data.glite.org":Roles is a complexType.
class transfer__Roles
{ public:
/// Element clientDN of type xs:string.
    std::string*                         clientDN                      ;	///< Nullable pointer.
/// Element serviceAdmin of type xs:string.
    std::string*                         serviceAdmin                  ;	///< Nullable pointer.
/// Element submitter of type xs:string.
    std::string*                         submitter                     ;	///< Nullable pointer.
/// Vector of transfer__StringPair* with length 1..unbounded
    std::vector<transfer__StringPair*  > VOManager                     ;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://glite.org/wsdl/services/org.glite.data.transfer.fts":ArrayOf_soapenc_string is a complexType.
class fts__ArrayOf_USCOREsoapenc_USCOREstring
{ public:
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > item                           0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://glite.org/wsdl/services/org.glite.data.transfer.fts":ArrayOf_tns3_JobStatus is a complexType.
class fts__ArrayOf_USCOREtns3_USCOREJobStatus
{ public:
/// Vector of transfer__JobStatus* with length 0..unbounded
    std::vector<transfer__JobStatus*   > item                           0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://glite.org/wsdl/services/org.glite.data.transfer.fts":ArrayOf_tns3_FileTransferStatus is a complexType.
class fts__ArrayOf_USCOREtns3_USCOREFileTransferStatus
{ public:
/// Vector of transfer__FileTransferStatus* with length 0..unbounded
    std::vector<transfer__FileTransferStatus*> item                           0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://glite.org/wsdl/services/org.glite.data.transfer.fts":ArrayOf_tns3_FileTransferStatus2 is a complexType.
class fts__ArrayOf_USCOREtns3_USCOREFileTransferStatus2
{ public:
/// Vector of transfer__FileTransferStatus2* with length 0..unbounded
    std::vector<transfer__FileTransferStatus2*> item                           0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://transfer.data.glite.org":InvalidArgumentException is a complexType with complexContent extension of "http://transfer.data.glite.org":TransferException.
class transfer__InvalidArgumentException : public transfer__TransferException
{ public:
/*  INHERITED FROM transfer__TransferException:
/// Element message of type xs:string.
    std::string*                         message                       ;	///< Nullable pointer.
    END OF INHERITED */
};

/// "http://transfer.data.glite.org":AuthorizationException is a complexType with complexContent extension of "http://transfer.data.glite.org":TransferException.
class transfer__AuthorizationException : public transfer__TransferException
{ public:
/*  INHERITED FROM transfer__TransferException:
/// Element message of type xs:string.
    std::string*                         message                       ;	///< Nullable pointer.
    END OF INHERITED */
};

/// "http://transfer.data.glite.org":ServiceBusyException is a complexType with complexContent extension of "http://transfer.data.glite.org":TransferException.
class transfer__ServiceBusyException : public transfer__TransferException
{ public:
/*  INHERITED FROM transfer__TransferException:
/// Element message of type xs:string.
    std::string*                         message                       ;	///< Nullable pointer.
    END OF INHERITED */
};

/// "http://transfer.data.glite.org":InternalException is a complexType with complexContent extension of "http://transfer.data.glite.org":TransferException.
class transfer__InternalException : public transfer__TransferException
{ public:
/*  INHERITED FROM transfer__TransferException:
/// Element message of type xs:string.
    std::string*                         message                       ;	///< Nullable pointer.
    END OF INHERITED */
};

/// "http://transfer.data.glite.org":NotExistsException is a complexType with complexContent extension of "http://transfer.data.glite.org":TransferException.
class transfer__NotExistsException : public transfer__TransferException
{ public:
/*  INHERITED FROM transfer__TransferException:
/// Element message of type xs:string.
    std::string*                         message                       ;	///< Nullable pointer.
    END OF INHERITED */
};

/// "http://transfer.data.glite.org":FileTransferStatus2 is a complexType with complexContent extension of "http://transfer.data.glite.org":FileTransferStatus.
class transfer__FileTransferStatus2 : public transfer__FileTransferStatus
{ public:
/*  INHERITED FROM transfer__FileTransferStatus:
/// Element logicalName of type xs:string.
    std::string*                         logicalName                   ;	///< Nullable pointer.
/// Element sourceSURL of type xs:string.
    std::string*                         sourceSURL                    ;	///< Nullable pointer.
/// Element destSURL of type xs:string.
    std::string*                         destSURL                      ;	///< Nullable pointer.
/// Element transferFileState of type xs:string.
    std::string*                         transferFileState             ;	///< Nullable pointer.
/// Element numFailures of type xs:int.
    int                                  numFailures                    1;	///< Required element.
/// Element reason of type xs:string.
    std::string*                         reason                        ;	///< Nullable pointer.
/// Element reason_class of type xs:string.
    std::string*                         reason_USCOREclass            ;	///< Nullable pointer.
/// Element duration of type xs:long.
    LONG64                               duration                       1;	///< Required element.
    END OF INHERITED */
/// Element error_scope of type xs:string.
    std::string*                         error_USCOREscope             ;	///< Nullable pointer.
/// Element error_phase of type xs:string.
    std::string*                         error_USCOREphase             ;	///< Nullable pointer.
};

/// "http://transfer.data.glite.org":TransferJobSummary2 is a complexType with complexContent extension of "http://transfer.data.glite.org":TransferJobSummary.
class transfer__TransferJobSummary2 : public transfer__TransferJobSummary
{ public:
/*  INHERITED FROM transfer__TransferJobSummary:
/// Element jobStatus of type "http://transfer.data.glite.org":JobStatus.
    transfer__JobStatus*                 jobStatus                     ;	///< Nullable pointer.
/// Element numDone of type xs:int.
    int                                  numDone                        1;	///< Required element.
/// Element numActive of type xs:int.
    int                                  numActive                      1;	///< Required element.
/// Element numPending of type xs:int.
    int                                  numPending                     1;	///< Required element.
/// Element numCanceled of type xs:int.
    int                                  numCanceled                    1;	///< Required element.
/// Element numCanceling of type xs:int.
    int                                  numCanceling                   1;	///< Required element.
/// Element numFailed of type xs:int.
    int                                  numFailed                      1;	///< Required element.
/// Element numFinished of type xs:int.
    int                                  numFinished                    1;	///< Required element.
/// Element numSubmitted of type xs:int.
    int                                  numSubmitted                   1;	///< Required element.
/// Element numHold of type xs:int.
    int                                  numHold                        1;	///< Required element.
/// Element numWaiting of type xs:int.
    int                                  numWaiting                     1;	///< Required element.
/// Element numCatalogFailed of type xs:int.
    int                                  numCatalogFailed               1;	///< Required element.
/// Element numRestarted of type xs:int.
    int                                  numRestarted                   1;	///< Required element.
    END OF INHERITED */
/// Element numReady of type xs:int.
    int                                  numReady                       1;	///< Required element.
/// Element numFinishing of type xs:int.
    int                                  numFinishing                   1;	///< Required element.
/// Element numAwaitingPrestage of type xs:int.
    int                                  numAwaitingPrestage            1;	///< Required element.
/// Element numPrestaging of type xs:int.
    int                                  numPrestaging                  1;	///< Required element.
/// Element numWaitingCatalogRegistration of type xs:int.
    int                                  numWaitingCatalogRegistration  1;	///< Required element.
/// Element numWaitingCatalogResolution of type xs:int.
    int                                  numWaitingCatalogResolution    1;	///< Required element.
/// Element numWaitingPrestage of type xs:int.
    int                                  numWaitingPrestage             1;	///< Required element.
};

/// "http://transfer.data.glite.org":CannotCancelException is a complexType with complexContent extension of "http://transfer.data.glite.org":TransferException.
class transfer__CannotCancelException : public transfer__TransferException
{ public:
/*  INHERITED FROM transfer__TransferException:
/// Element message of type xs:string.
    std::string*                         message                       ;	///< Nullable pointer.
    END OF INHERITED */
};

/// "http://transfer.data.glite.org":ExistsException is a complexType with complexContent extension of "http://transfer.data.glite.org":TransferException.
class transfer__ExistsException : public transfer__TransferException
{ public:
/*  INHERITED FROM transfer__TransferException:
/// Element message of type xs:string.
    std::string*                         message                       ;	///< Nullable pointer.
    END OF INHERITED */
};

/// Element "http://transfer.data.glite.org":TransferExceptionElement of type "http://transfer.data.glite.org":TransferException.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "http://transfer.data.glite.org":InvalidArgumentExceptionElement of type "http://transfer.data.glite.org":InvalidArgumentException.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "http://transfer.data.glite.org":AuthorizationExceptionElement of type "http://transfer.data.glite.org":AuthorizationException.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "http://transfer.data.glite.org":ServiceBusyExceptionElement of type "http://transfer.data.glite.org":ServiceBusyException.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "http://transfer.data.glite.org":InternalExceptionElement of type "http://transfer.data.glite.org":InternalException.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "http://transfer.data.glite.org":NotExistsExceptionElement of type "http://transfer.data.glite.org":NotExistsException.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "http://transfer.data.glite.org":CannotCancelExceptionElement of type "http://transfer.data.glite.org":CannotCancelException.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "http://transfer.data.glite.org":ExistsExceptionElement of type "http://transfer.data.glite.org":ExistsException.
/// Note: use wsdl2h option -g to generate this global element declaration.

/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap fts  service name:	FileTransferSoapBinding
//gsoap fts  service type:	FileTransfer
//gsoap fts  service port:	https://localhost:8443/glite-data-transfer-interface/FileTransfer
//gsoap fts  service namespace:	http://glite.org/wsdl/services/org.glite.data.transfer.fts
//gsoap fts  service transport:	http://schemas.xmlsoap.org/soap/http

/** @mainpage Service Definitions

@section Service_bindings Bindings
  - @ref FileTransferSoapBinding

*/

/**

@page FileTransferSoapBinding Binding "FileTransferSoapBinding"

@section FileTransferSoapBinding_operations Operations of Binding  "FileTransferSoapBinding"
  - @ref fts__placementSubmit
  - @ref fts__placementSubmit2
  - @ref fts__transferSubmit
  - @ref fts__transferSubmit2
  - @ref fts__transferSubmit3
  - @ref fts__submit
  - @ref fts__listRequests
  - @ref fts__listRequests2
  - @ref fts__getFileStatus
  - @ref fts__getFileStatus2
  - @ref fts__getTransferJobStatus
  - @ref fts__getTransferJobSummary
  - @ref fts__getTransferJobSummary2
  - @ref fts__cancel
  - @ref fts__setJobPriority
  - @ref fts__addVOManager
  - @ref fts__removeVOManager
  - @ref fts__listVOManagers
  - @ref fts__getRoles
  - @ref fts__getRolesOf
  - @ref fts__getVersion
  - @ref fts__getSchemaVersion
  - @ref fts__getInterfaceVersion
  - @ref fts__getServiceMetadata

@section FileTransferSoapBinding_ports Endpoints of Binding  "FileTransferSoapBinding"
  - https://localhost:8443/glite-data-transfer-interface/FileTransfer

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * FileTransferSoapBinding                                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * fts__placementSubmit                                                       *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "fts__placementSubmitResponse" of service binding "FileTransferSoapBinding" operation "fts__placementSubmit"
struct fts__placementSubmitResponse
{
    std::string                         _placementSubmitReturn;
};

/// Operation "fts__placementSubmit" of service binding "FileTransferSoapBinding"

/**

Operation details:

  - SOAP RPC literal style
  - SOAP Fault: "http://transfer.data.glite.org":AuthorizationExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":ServiceBusyExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":InvalidArgumentExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":InternalExceptionElement (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_fts__placementSubmit(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    transfer__PlacementJob*             job,
    // response parameters:
    struct fts__placementSubmitResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int fts__placementSubmit(
    struct soap *soap,
    // request parameters:
    transfer__PlacementJob*             job,
    // response parameters:
    struct fts__placementSubmitResponse&
  );
@endcode

C++ proxy class (defined in soapFileTransferSoapBindingProxy.h):
  class FileTransferSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap fts  service method-style:	placementSubmit rpc
//gsoap fts  service method-encoding:	placementSubmit literal
//gsoap fts  service method-action:	placementSubmit ""
//gsoap fts  service method-fault:	placementSubmit transfer__AuthorizationExceptionElement
//gsoap fts  service method-fault:	placementSubmit transfer__ServiceBusyExceptionElement
//gsoap fts  service method-fault:	placementSubmit transfer__InvalidArgumentExceptionElement
//gsoap fts  service method-fault:	placementSubmit transfer__InternalExceptionElement
int fts__placementSubmit(
    transfer__PlacementJob*             _job,	///< Request parameter
    struct fts__placementSubmitResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * fts__placementSubmit2                                                      *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "fts__placementSubmit2Response" of service binding "FileTransferSoapBinding" operation "fts__placementSubmit2"
struct fts__placementSubmit2Response
{
    std::string                         _placementSubmit2Return;
};

/// Operation "fts__placementSubmit2" of service binding "FileTransferSoapBinding"

/**

Operation details:

  - SOAP RPC literal style
  - SOAP Fault: "http://transfer.data.glite.org":AuthorizationExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":ServiceBusyExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":InvalidArgumentExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":InternalExceptionElement (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_fts__placementSubmit2(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    transfer__PlacementJob*             job,
    // response parameters:
    struct fts__placementSubmit2Response&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int fts__placementSubmit2(
    struct soap *soap,
    // request parameters:
    transfer__PlacementJob*             job,
    // response parameters:
    struct fts__placementSubmit2Response&
  );
@endcode

C++ proxy class (defined in soapFileTransferSoapBindingProxy.h):
  class FileTransferSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap fts  service method-style:	placementSubmit2 rpc
//gsoap fts  service method-encoding:	placementSubmit2 literal
//gsoap fts  service method-action:	placementSubmit2 ""
//gsoap fts  service method-fault:	placementSubmit2 transfer__AuthorizationExceptionElement
//gsoap fts  service method-fault:	placementSubmit2 transfer__ServiceBusyExceptionElement
//gsoap fts  service method-fault:	placementSubmit2 transfer__InvalidArgumentExceptionElement
//gsoap fts  service method-fault:	placementSubmit2 transfer__InternalExceptionElement
int fts__placementSubmit2(
    transfer__PlacementJob*             _job,	///< Request parameter
    struct fts__placementSubmit2Response&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * fts__transferSubmit                                                        *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "fts__transferSubmitResponse" of service binding "FileTransferSoapBinding" operation "fts__transferSubmit"
struct fts__transferSubmitResponse
{
    std::string                         _transferSubmitReturn;
};

/// Operation "fts__transferSubmit" of service binding "FileTransferSoapBinding"

/**

Operation details:

  - SOAP RPC literal style
  - SOAP Fault: "http://transfer.data.glite.org":AuthorizationExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":ServiceBusyExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":InvalidArgumentExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":InternalExceptionElement (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_fts__transferSubmit(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    transfer__TransferJob*              job,
    // response parameters:
    struct fts__transferSubmitResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int fts__transferSubmit(
    struct soap *soap,
    // request parameters:
    transfer__TransferJob*              job,
    // response parameters:
    struct fts__transferSubmitResponse&
  );
@endcode

C++ proxy class (defined in soapFileTransferSoapBindingProxy.h):
  class FileTransferSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap fts  service method-style:	transferSubmit rpc
//gsoap fts  service method-encoding:	transferSubmit literal
//gsoap fts  service method-action:	transferSubmit ""
//gsoap fts  service method-fault:	transferSubmit transfer__AuthorizationExceptionElement
//gsoap fts  service method-fault:	transferSubmit transfer__ServiceBusyExceptionElement
//gsoap fts  service method-fault:	transferSubmit transfer__InvalidArgumentExceptionElement
//gsoap fts  service method-fault:	transferSubmit transfer__InternalExceptionElement
int fts__transferSubmit(
    transfer__TransferJob*              _job,	///< Request parameter
    struct fts__transferSubmitResponse &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * fts__transferSubmit2                                                       *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "fts__transferSubmit2Response" of service binding "FileTransferSoapBinding" operation "fts__transferSubmit2"
struct fts__transferSubmit2Response
{
    std::string                         _transferSubmit2Return;
};

/// Operation "fts__transferSubmit2" of service binding "FileTransferSoapBinding"

/**

Operation details:

  - SOAP RPC literal style
  - SOAP Fault: "http://transfer.data.glite.org":AuthorizationExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":ServiceBusyExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":InvalidArgumentExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":InternalExceptionElement (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_fts__transferSubmit2(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    transfer__TransferJob*              job,
    // response parameters:
    struct fts__transferSubmit2Response&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int fts__transferSubmit2(
    struct soap *soap,
    // request parameters:
    transfer__TransferJob*              job,
    // response parameters:
    struct fts__transferSubmit2Response&
  );
@endcode

C++ proxy class (defined in soapFileTransferSoapBindingProxy.h):
  class FileTransferSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap fts  service method-style:	transferSubmit2 rpc
//gsoap fts  service method-encoding:	transferSubmit2 literal
//gsoap fts  service method-action:	transferSubmit2 ""
//gsoap fts  service method-fault:	transferSubmit2 transfer__AuthorizationExceptionElement
//gsoap fts  service method-fault:	transferSubmit2 transfer__ServiceBusyExceptionElement
//gsoap fts  service method-fault:	transferSubmit2 transfer__InvalidArgumentExceptionElement
//gsoap fts  service method-fault:	transferSubmit2 transfer__InternalExceptionElement
int fts__transferSubmit2(
    transfer__TransferJob*              _job,	///< Request parameter
    struct fts__transferSubmit2Response&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * fts__transferSubmit3                                                       *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "fts__transferSubmit3Response" of service binding "FileTransferSoapBinding" operation "fts__transferSubmit3"
struct fts__transferSubmit3Response
{
    std::string                         _transferSubmit3Return;
};

/// Operation "fts__transferSubmit3" of service binding "FileTransferSoapBinding"

/**

Operation details:

  - SOAP RPC literal style
  - SOAP Fault: "http://transfer.data.glite.org":AuthorizationExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":ServiceBusyExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":InvalidArgumentExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":InternalExceptionElement (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_fts__transferSubmit3(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    transfer__TransferJob2*             job,
    // response parameters:
    struct fts__transferSubmit3Response&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int fts__transferSubmit3(
    struct soap *soap,
    // request parameters:
    transfer__TransferJob2*             job,
    // response parameters:
    struct fts__transferSubmit3Response&
  );
@endcode

C++ proxy class (defined in soapFileTransferSoapBindingProxy.h):
  class FileTransferSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap fts  service method-style:	transferSubmit3 rpc
//gsoap fts  service method-encoding:	transferSubmit3 literal
//gsoap fts  service method-action:	transferSubmit3 ""
//gsoap fts  service method-fault:	transferSubmit3 transfer__AuthorizationExceptionElement
//gsoap fts  service method-fault:	transferSubmit3 transfer__ServiceBusyExceptionElement
//gsoap fts  service method-fault:	transferSubmit3 transfer__InvalidArgumentExceptionElement
//gsoap fts  service method-fault:	transferSubmit3 transfer__InternalExceptionElement
int fts__transferSubmit3(
    transfer__TransferJob2*             _job,	///< Request parameter
    struct fts__transferSubmit3Response&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * fts__submit                                                                *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "fts__submitResponse" of service binding "FileTransferSoapBinding" operation "fts__submit"
struct fts__submitResponse
{
    std::string                         _submitReturn;
};

/// Operation "fts__submit" of service binding "FileTransferSoapBinding"

/**

Operation details:

  - SOAP RPC literal style
  - SOAP Fault: "http://transfer.data.glite.org":AuthorizationExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":ServiceBusyExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":InvalidArgumentExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":InternalExceptionElement (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_fts__submit(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    transfer__TransferJob*              job,
    // response parameters:
    struct fts__submitResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int fts__submit(
    struct soap *soap,
    // request parameters:
    transfer__TransferJob*              job,
    // response parameters:
    struct fts__submitResponse&
  );
@endcode

C++ proxy class (defined in soapFileTransferSoapBindingProxy.h):
  class FileTransferSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap fts  service method-style:	submit rpc
//gsoap fts  service method-encoding:	submit literal
//gsoap fts  service method-action:	submit ""
//gsoap fts  service method-fault:	submit transfer__AuthorizationExceptionElement
//gsoap fts  service method-fault:	submit transfer__ServiceBusyExceptionElement
//gsoap fts  service method-fault:	submit transfer__InvalidArgumentExceptionElement
//gsoap fts  service method-fault:	submit transfer__InternalExceptionElement
int fts__submit(
    transfer__TransferJob*              _job,	///< Request parameter
    struct fts__submitResponse         &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * fts__listRequests                                                          *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "fts__listRequestsResponse" of service binding "FileTransferSoapBinding" operation "fts__listRequests"
struct fts__listRequestsResponse
{
    fts__ArrayOf_USCOREtns3_USCOREJobStatus* _listRequestsReturn;
};

/// Operation "fts__listRequests" of service binding "FileTransferSoapBinding"

/**

Operation details:

  - SOAP RPC literal style
  - SOAP Fault: "http://transfer.data.glite.org":AuthorizationExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":ServiceBusyExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":InvalidArgumentExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":InternalExceptionElement (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_fts__listRequests(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    fts__ArrayOf_USCOREsoapenc_USCOREstring* inGivenStates,
    // response parameters:
    struct fts__listRequestsResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int fts__listRequests(
    struct soap *soap,
    // request parameters:
    fts__ArrayOf_USCOREsoapenc_USCOREstring* inGivenStates,
    // response parameters:
    struct fts__listRequestsResponse&
  );
@endcode

C++ proxy class (defined in soapFileTransferSoapBindingProxy.h):
  class FileTransferSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap fts  service method-style:	listRequests rpc
//gsoap fts  service method-encoding:	listRequests literal
//gsoap fts  service method-action:	listRequests ""
//gsoap fts  service method-fault:	listRequests transfer__AuthorizationExceptionElement
//gsoap fts  service method-fault:	listRequests transfer__ServiceBusyExceptionElement
//gsoap fts  service method-fault:	listRequests transfer__InvalidArgumentExceptionElement
//gsoap fts  service method-fault:	listRequests transfer__InternalExceptionElement
int fts__listRequests(
    fts__ArrayOf_USCOREsoapenc_USCOREstring* _inGivenStates,	///< Request parameter
    struct fts__listRequestsResponse   &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * fts__listRequests2                                                         *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "fts__listRequests2Response" of service binding "FileTransferSoapBinding" operation "fts__listRequests2"
struct fts__listRequests2Response
{
    fts__ArrayOf_USCOREtns3_USCOREJobStatus* _listRequests2Return;
};

/// Operation "fts__listRequests2" of service binding "FileTransferSoapBinding"

/**

Operation details:

  - SOAP RPC literal style
  - SOAP Fault: "http://transfer.data.glite.org":AuthorizationExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":ServiceBusyExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":InvalidArgumentExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":InternalExceptionElement (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_fts__listRequests2(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    fts__ArrayOf_USCOREsoapenc_USCOREstring* inGivenStates,
    std::string                         forDN,
    std::string                         forVO,
    // response parameters:
    struct fts__listRequests2Response&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int fts__listRequests2(
    struct soap *soap,
    // request parameters:
    fts__ArrayOf_USCOREsoapenc_USCOREstring* inGivenStates,
    std::string                         forDN,
    std::string                         forVO,
    // response parameters:
    struct fts__listRequests2Response&
  );
@endcode

C++ proxy class (defined in soapFileTransferSoapBindingProxy.h):
  class FileTransferSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap fts  service method-style:	listRequests2 rpc
//gsoap fts  service method-encoding:	listRequests2 literal
//gsoap fts  service method-action:	listRequests2 ""
//gsoap fts  service method-fault:	listRequests2 transfer__AuthorizationExceptionElement
//gsoap fts  service method-fault:	listRequests2 transfer__ServiceBusyExceptionElement
//gsoap fts  service method-fault:	listRequests2 transfer__InvalidArgumentExceptionElement
//gsoap fts  service method-fault:	listRequests2 transfer__InternalExceptionElement
int fts__listRequests2(
    fts__ArrayOf_USCOREsoapenc_USCOREstring* _inGivenStates,	///< Request parameter
    std::string                         _forDN,	///< Request parameter
    std::string                         _forVO,	///< Request parameter
    struct fts__listRequests2Response  &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * fts__getFileStatus                                                         *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "fts__getFileStatusResponse" of service binding "FileTransferSoapBinding" operation "fts__getFileStatus"
struct fts__getFileStatusResponse
{
    fts__ArrayOf_USCOREtns3_USCOREFileTransferStatus* _getFileStatusReturn;
};

/// Operation "fts__getFileStatus" of service binding "FileTransferSoapBinding"

/**

Operation details:

  - SOAP RPC literal style
  - SOAP Fault: "http://transfer.data.glite.org":AuthorizationExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":ServiceBusyExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":NotExistsExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":InternalExceptionElement (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_fts__getFileStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         requestID,
    int                                 offset,
    int                                 limit,
    // response parameters:
    struct fts__getFileStatusResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int fts__getFileStatus(
    struct soap *soap,
    // request parameters:
    std::string                         requestID,
    int                                 offset,
    int                                 limit,
    // response parameters:
    struct fts__getFileStatusResponse&
  );
@endcode

C++ proxy class (defined in soapFileTransferSoapBindingProxy.h):
  class FileTransferSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap fts  service method-style:	getFileStatus rpc
//gsoap fts  service method-encoding:	getFileStatus literal
//gsoap fts  service method-action:	getFileStatus ""
//gsoap fts  service method-fault:	getFileStatus transfer__AuthorizationExceptionElement
//gsoap fts  service method-fault:	getFileStatus transfer__ServiceBusyExceptionElement
//gsoap fts  service method-fault:	getFileStatus transfer__NotExistsExceptionElement
//gsoap fts  service method-fault:	getFileStatus transfer__InternalExceptionElement
int fts__getFileStatus(
    std::string                         _requestID,	///< Request parameter
    int                                 _offset,	///< Request parameter
    int                                 _limit,	///< Request parameter
    struct fts__getFileStatusResponse  &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * fts__getFileStatus2                                                        *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "fts__getFileStatus2Response" of service binding "FileTransferSoapBinding" operation "fts__getFileStatus2"
struct fts__getFileStatus2Response
{
    fts__ArrayOf_USCOREtns3_USCOREFileTransferStatus2* _getFileStatus2Return;
};

/// Operation "fts__getFileStatus2" of service binding "FileTransferSoapBinding"

/**

Operation details:

  - SOAP RPC literal style
  - SOAP Fault: "http://transfer.data.glite.org":AuthorizationExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":ServiceBusyExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":NotExistsExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":InternalExceptionElement (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_fts__getFileStatus2(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         requestID,
    int                                 offset,
    int                                 limit,
    // response parameters:
    struct fts__getFileStatus2Response&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int fts__getFileStatus2(
    struct soap *soap,
    // request parameters:
    std::string                         requestID,
    int                                 offset,
    int                                 limit,
    // response parameters:
    struct fts__getFileStatus2Response&
  );
@endcode

C++ proxy class (defined in soapFileTransferSoapBindingProxy.h):
  class FileTransferSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap fts  service method-style:	getFileStatus2 rpc
//gsoap fts  service method-encoding:	getFileStatus2 literal
//gsoap fts  service method-action:	getFileStatus2 ""
//gsoap fts  service method-fault:	getFileStatus2 transfer__AuthorizationExceptionElement
//gsoap fts  service method-fault:	getFileStatus2 transfer__ServiceBusyExceptionElement
//gsoap fts  service method-fault:	getFileStatus2 transfer__NotExistsExceptionElement
//gsoap fts  service method-fault:	getFileStatus2 transfer__InternalExceptionElement
int fts__getFileStatus2(
    std::string                         _requestID,	///< Request parameter
    int                                 _offset,	///< Request parameter
    int                                 _limit,	///< Request parameter
    struct fts__getFileStatus2Response &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * fts__getTransferJobStatus                                                  *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "fts__getTransferJobStatusResponse" of service binding "FileTransferSoapBinding" operation "fts__getTransferJobStatus"
struct fts__getTransferJobStatusResponse
{
    transfer__JobStatus*                _getTransferJobStatusReturn;
};

/// Operation "fts__getTransferJobStatus" of service binding "FileTransferSoapBinding"

/**

Operation details:

  - SOAP RPC literal style
  - SOAP Fault: "http://transfer.data.glite.org":AuthorizationExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":ServiceBusyExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":NotExistsExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":InternalExceptionElement (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_fts__getTransferJobStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         requestID,
    // response parameters:
    struct fts__getTransferJobStatusResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int fts__getTransferJobStatus(
    struct soap *soap,
    // request parameters:
    std::string                         requestID,
    // response parameters:
    struct fts__getTransferJobStatusResponse&
  );
@endcode

C++ proxy class (defined in soapFileTransferSoapBindingProxy.h):
  class FileTransferSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap fts  service method-style:	getTransferJobStatus rpc
//gsoap fts  service method-encoding:	getTransferJobStatus literal
//gsoap fts  service method-action:	getTransferJobStatus ""
//gsoap fts  service method-fault:	getTransferJobStatus transfer__AuthorizationExceptionElement
//gsoap fts  service method-fault:	getTransferJobStatus transfer__ServiceBusyExceptionElement
//gsoap fts  service method-fault:	getTransferJobStatus transfer__NotExistsExceptionElement
//gsoap fts  service method-fault:	getTransferJobStatus transfer__InternalExceptionElement
int fts__getTransferJobStatus(
    std::string                         _requestID,	///< Request parameter
    struct fts__getTransferJobStatusResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * fts__getTransferJobSummary                                                 *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "fts__getTransferJobSummaryResponse" of service binding "FileTransferSoapBinding" operation "fts__getTransferJobSummary"
struct fts__getTransferJobSummaryResponse
{
    transfer__TransferJobSummary*       _getTransferJobSummaryReturn;
};

/// Operation "fts__getTransferJobSummary" of service binding "FileTransferSoapBinding"

/**

Operation details:

  - SOAP RPC literal style
  - SOAP Fault: "http://transfer.data.glite.org":AuthorizationExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":ServiceBusyExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":NotExistsExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":InternalExceptionElement (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_fts__getTransferJobSummary(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         requestID,
    // response parameters:
    struct fts__getTransferJobSummaryResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int fts__getTransferJobSummary(
    struct soap *soap,
    // request parameters:
    std::string                         requestID,
    // response parameters:
    struct fts__getTransferJobSummaryResponse&
  );
@endcode

C++ proxy class (defined in soapFileTransferSoapBindingProxy.h):
  class FileTransferSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap fts  service method-style:	getTransferJobSummary rpc
//gsoap fts  service method-encoding:	getTransferJobSummary literal
//gsoap fts  service method-action:	getTransferJobSummary ""
//gsoap fts  service method-fault:	getTransferJobSummary transfer__AuthorizationExceptionElement
//gsoap fts  service method-fault:	getTransferJobSummary transfer__ServiceBusyExceptionElement
//gsoap fts  service method-fault:	getTransferJobSummary transfer__NotExistsExceptionElement
//gsoap fts  service method-fault:	getTransferJobSummary transfer__InternalExceptionElement
int fts__getTransferJobSummary(
    std::string                         _requestID,	///< Request parameter
    struct fts__getTransferJobSummaryResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * fts__getTransferJobSummary2                                                *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "fts__getTransferJobSummary2Response" of service binding "FileTransferSoapBinding" operation "fts__getTransferJobSummary2"
struct fts__getTransferJobSummary2Response
{
    transfer__TransferJobSummary2*      _getTransferJobSummary2Return;
};

/// Operation "fts__getTransferJobSummary2" of service binding "FileTransferSoapBinding"

/**

Operation details:

  - SOAP RPC literal style
  - SOAP Fault: "http://transfer.data.glite.org":AuthorizationExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":ServiceBusyExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":NotExistsExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":InternalExceptionElement (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_fts__getTransferJobSummary2(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         requestID,
    // response parameters:
    struct fts__getTransferJobSummary2Response&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int fts__getTransferJobSummary2(
    struct soap *soap,
    // request parameters:
    std::string                         requestID,
    // response parameters:
    struct fts__getTransferJobSummary2Response&
  );
@endcode

C++ proxy class (defined in soapFileTransferSoapBindingProxy.h):
  class FileTransferSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap fts  service method-style:	getTransferJobSummary2 rpc
//gsoap fts  service method-encoding:	getTransferJobSummary2 literal
//gsoap fts  service method-action:	getTransferJobSummary2 ""
//gsoap fts  service method-fault:	getTransferJobSummary2 transfer__AuthorizationExceptionElement
//gsoap fts  service method-fault:	getTransferJobSummary2 transfer__ServiceBusyExceptionElement
//gsoap fts  service method-fault:	getTransferJobSummary2 transfer__NotExistsExceptionElement
//gsoap fts  service method-fault:	getTransferJobSummary2 transfer__InternalExceptionElement
int fts__getTransferJobSummary2(
    std::string                         _requestID,	///< Request parameter
    struct fts__getTransferJobSummary2Response&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * fts__cancel                                                                *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "fts__cancelResponse" of service binding "FileTransferSoapBinding" operation "fts__cancel"
struct fts__cancelResponse
{
};

/// Operation "fts__cancel" of service binding "FileTransferSoapBinding"

/**

Operation details:

  - SOAP RPC literal style
  - SOAP Fault: "http://transfer.data.glite.org":CannotCancelExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":AuthorizationExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":ServiceBusyExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":NotExistsExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":InternalExceptionElement (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_fts__cancel(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    fts__ArrayOf_USCOREsoapenc_USCOREstring* requestIDs,
    // response parameters:
    struct fts__cancelResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int fts__cancel(
    struct soap *soap,
    // request parameters:
    fts__ArrayOf_USCOREsoapenc_USCOREstring* requestIDs,
    // response parameters:
    struct fts__cancelResponse&
  );
@endcode

C++ proxy class (defined in soapFileTransferSoapBindingProxy.h):
  class FileTransferSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap fts  service method-style:	cancel rpc
//gsoap fts  service method-encoding:	cancel literal
//gsoap fts  service method-action:	cancel ""
//gsoap fts  service method-fault:	cancel transfer__CannotCancelExceptionElement
//gsoap fts  service method-fault:	cancel transfer__AuthorizationExceptionElement
//gsoap fts  service method-fault:	cancel transfer__ServiceBusyExceptionElement
//gsoap fts  service method-fault:	cancel transfer__NotExistsExceptionElement
//gsoap fts  service method-fault:	cancel transfer__InternalExceptionElement
int fts__cancel(
    fts__ArrayOf_USCOREsoapenc_USCOREstring* _requestIDs,	///< Request parameter
    struct fts__cancelResponse         &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * fts__setJobPriority                                                        *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "fts__setJobPriorityResponse" of service binding "FileTransferSoapBinding" operation "fts__setJobPriority"
struct fts__setJobPriorityResponse
{
};

/// Operation "fts__setJobPriority" of service binding "FileTransferSoapBinding"

/**

Operation details:

  - SOAP RPC literal style
  - SOAP Fault: "http://transfer.data.glite.org":AuthorizationExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":ServiceBusyExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":NotExistsExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":InvalidArgumentExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":InternalExceptionElement (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_fts__setJobPriority(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         requestID,
    int                                 priority,
    // response parameters:
    struct fts__setJobPriorityResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int fts__setJobPriority(
    struct soap *soap,
    // request parameters:
    std::string                         requestID,
    int                                 priority,
    // response parameters:
    struct fts__setJobPriorityResponse&
  );
@endcode

C++ proxy class (defined in soapFileTransferSoapBindingProxy.h):
  class FileTransferSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap fts  service method-style:	setJobPriority rpc
//gsoap fts  service method-encoding:	setJobPriority literal
//gsoap fts  service method-action:	setJobPriority ""
//gsoap fts  service method-fault:	setJobPriority transfer__AuthorizationExceptionElement
//gsoap fts  service method-fault:	setJobPriority transfer__ServiceBusyExceptionElement
//gsoap fts  service method-fault:	setJobPriority transfer__NotExistsExceptionElement
//gsoap fts  service method-fault:	setJobPriority transfer__InvalidArgumentExceptionElement
//gsoap fts  service method-fault:	setJobPriority transfer__InternalExceptionElement
int fts__setJobPriority(
    std::string                         _requestID,	///< Request parameter
    int                                 _priority,	///< Request parameter
    struct fts__setJobPriorityResponse &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * fts__addVOManager                                                          *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "fts__addVOManagerResponse" of service binding "FileTransferSoapBinding" operation "fts__addVOManager"
struct fts__addVOManagerResponse
{
};

/// Operation "fts__addVOManager" of service binding "FileTransferSoapBinding"

/**

Operation details:

  - SOAP RPC literal style
  - SOAP Fault: "http://transfer.data.glite.org":AuthorizationExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":ExistsExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":NotExistsExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":InvalidArgumentExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":InternalExceptionElement (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_fts__addVOManager(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         VOName,
    std::string                         principal,
    // response parameters:
    struct fts__addVOManagerResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int fts__addVOManager(
    struct soap *soap,
    // request parameters:
    std::string                         VOName,
    std::string                         principal,
    // response parameters:
    struct fts__addVOManagerResponse&
  );
@endcode

C++ proxy class (defined in soapFileTransferSoapBindingProxy.h):
  class FileTransferSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap fts  service method-style:	addVOManager rpc
//gsoap fts  service method-encoding:	addVOManager literal
//gsoap fts  service method-action:	addVOManager ""
//gsoap fts  service method-fault:	addVOManager transfer__AuthorizationExceptionElement
//gsoap fts  service method-fault:	addVOManager transfer__ExistsExceptionElement
//gsoap fts  service method-fault:	addVOManager transfer__NotExistsExceptionElement
//gsoap fts  service method-fault:	addVOManager transfer__InvalidArgumentExceptionElement
//gsoap fts  service method-fault:	addVOManager transfer__InternalExceptionElement
int fts__addVOManager(
    std::string                         _VOName,	///< Request parameter
    std::string                         _principal,	///< Request parameter
    struct fts__addVOManagerResponse   &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * fts__removeVOManager                                                       *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "fts__removeVOManagerResponse" of service binding "FileTransferSoapBinding" operation "fts__removeVOManager"
struct fts__removeVOManagerResponse
{
};

/// Operation "fts__removeVOManager" of service binding "FileTransferSoapBinding"

/**

Operation details:

  - SOAP RPC literal style
  - SOAP Fault: "http://transfer.data.glite.org":AuthorizationExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":NotExistsExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":InvalidArgumentExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":InternalExceptionElement (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_fts__removeVOManager(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         VOName,
    std::string                         principal,
    // response parameters:
    struct fts__removeVOManagerResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int fts__removeVOManager(
    struct soap *soap,
    // request parameters:
    std::string                         VOName,
    std::string                         principal,
    // response parameters:
    struct fts__removeVOManagerResponse&
  );
@endcode

C++ proxy class (defined in soapFileTransferSoapBindingProxy.h):
  class FileTransferSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap fts  service method-style:	removeVOManager rpc
//gsoap fts  service method-encoding:	removeVOManager literal
//gsoap fts  service method-action:	removeVOManager ""
//gsoap fts  service method-fault:	removeVOManager transfer__AuthorizationExceptionElement
//gsoap fts  service method-fault:	removeVOManager transfer__NotExistsExceptionElement
//gsoap fts  service method-fault:	removeVOManager transfer__InvalidArgumentExceptionElement
//gsoap fts  service method-fault:	removeVOManager transfer__InternalExceptionElement
int fts__removeVOManager(
    std::string                         _VOName,	///< Request parameter
    std::string                         _principal,	///< Request parameter
    struct fts__removeVOManagerResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * fts__listVOManagers                                                        *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "fts__listVOManagersResponse" of service binding "FileTransferSoapBinding" operation "fts__listVOManagers"
struct fts__listVOManagersResponse
{
    fts__ArrayOf_USCOREsoapenc_USCOREstring* _listVOManagersReturn;
};

/// Operation "fts__listVOManagers" of service binding "FileTransferSoapBinding"

/**

Operation details:

  - SOAP RPC literal style
  - SOAP Fault: "http://transfer.data.glite.org":AuthorizationExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":NotExistsExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":InvalidArgumentExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":InternalExceptionElement (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_fts__listVOManagers(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         VOName,
    // response parameters:
    struct fts__listVOManagersResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int fts__listVOManagers(
    struct soap *soap,
    // request parameters:
    std::string                         VOName,
    // response parameters:
    struct fts__listVOManagersResponse&
  );
@endcode

C++ proxy class (defined in soapFileTransferSoapBindingProxy.h):
  class FileTransferSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap fts  service method-style:	listVOManagers rpc
//gsoap fts  service method-encoding:	listVOManagers literal
//gsoap fts  service method-action:	listVOManagers ""
//gsoap fts  service method-fault:	listVOManagers transfer__AuthorizationExceptionElement
//gsoap fts  service method-fault:	listVOManagers transfer__NotExistsExceptionElement
//gsoap fts  service method-fault:	listVOManagers transfer__InvalidArgumentExceptionElement
//gsoap fts  service method-fault:	listVOManagers transfer__InternalExceptionElement
int fts__listVOManagers(
    std::string                         _VOName,	///< Request parameter
    struct fts__listVOManagersResponse &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * fts__getRoles                                                              *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "fts__getRolesResponse" of service binding "FileTransferSoapBinding" operation "fts__getRoles"
struct fts__getRolesResponse
{
    transfer__Roles*                    getRolesReturn;
};

/// Operation "fts__getRoles" of service binding "FileTransferSoapBinding"

/**

Operation details:

  - SOAP RPC literal style
  - SOAP Fault: "http://transfer.data.glite.org":AuthorizationExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":InternalExceptionElement (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_fts__getRoles(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    struct fts__getRolesResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int fts__getRoles(
    struct soap *soap,
    // request parameters:
    // response parameters:
    struct fts__getRolesResponse&
  );
@endcode

C++ proxy class (defined in soapFileTransferSoapBindingProxy.h):
  class FileTransferSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap fts  service method-style:	getRoles rpc
//gsoap fts  service method-encoding:	getRoles literal
//gsoap fts  service method-action:	getRoles ""
//gsoap fts  service method-fault:	getRoles transfer__AuthorizationExceptionElement
//gsoap fts  service method-fault:	getRoles transfer__InternalExceptionElement
int fts__getRoles(
    struct fts__getRolesResponse       &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * fts__getRolesOf                                                            *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "fts__getRolesOfResponse" of service binding "FileTransferSoapBinding" operation "fts__getRolesOf"
struct fts__getRolesOfResponse
{
    transfer__Roles*                    _getRolesOfReturn;
};

/// Operation "fts__getRolesOf" of service binding "FileTransferSoapBinding"

/**

Operation details:

  - SOAP RPC literal style
  - SOAP Fault: "http://transfer.data.glite.org":AuthorizationExceptionElement (literal)
  - SOAP Fault: "http://transfer.data.glite.org":InternalExceptionElement (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_fts__getRolesOf(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         otherDN,
    // response parameters:
    struct fts__getRolesOfResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int fts__getRolesOf(
    struct soap *soap,
    // request parameters:
    std::string                         otherDN,
    // response parameters:
    struct fts__getRolesOfResponse&
  );
@endcode

C++ proxy class (defined in soapFileTransferSoapBindingProxy.h):
  class FileTransferSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap fts  service method-style:	getRolesOf rpc
//gsoap fts  service method-encoding:	getRolesOf literal
//gsoap fts  service method-action:	getRolesOf ""
//gsoap fts  service method-fault:	getRolesOf transfer__AuthorizationExceptionElement
//gsoap fts  service method-fault:	getRolesOf transfer__InternalExceptionElement
int fts__getRolesOf(
    std::string                         _otherDN,	///< Request parameter
    struct fts__getRolesOfResponse     &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * fts__getVersion                                                            *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "fts__getVersionResponse" of service binding "FileTransferSoapBinding" operation "fts__getVersion"
struct fts__getVersionResponse
{
    std::string                         getVersionReturn;
};

/// Operation "fts__getVersion" of service binding "FileTransferSoapBinding"

/**

Operation details:

  - SOAP RPC literal style

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_fts__getVersion(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    struct fts__getVersionResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int fts__getVersion(
    struct soap *soap,
    // request parameters:
    // response parameters:
    struct fts__getVersionResponse&
  );
@endcode

C++ proxy class (defined in soapFileTransferSoapBindingProxy.h):
  class FileTransferSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap fts  service method-style:	getVersion rpc
//gsoap fts  service method-encoding:	getVersion literal
//gsoap fts  service method-action:	getVersion ""
int fts__getVersion(
    struct fts__getVersionResponse     &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * fts__getSchemaVersion                                                      *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "fts__getSchemaVersionResponse" of service binding "FileTransferSoapBinding" operation "fts__getSchemaVersion"
struct fts__getSchemaVersionResponse
{
    std::string                         getSchemaVersionReturn;
};

/// Operation "fts__getSchemaVersion" of service binding "FileTransferSoapBinding"

/**

Operation details:

  - SOAP RPC literal style

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_fts__getSchemaVersion(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    struct fts__getSchemaVersionResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int fts__getSchemaVersion(
    struct soap *soap,
    // request parameters:
    // response parameters:
    struct fts__getSchemaVersionResponse&
  );
@endcode

C++ proxy class (defined in soapFileTransferSoapBindingProxy.h):
  class FileTransferSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap fts  service method-style:	getSchemaVersion rpc
//gsoap fts  service method-encoding:	getSchemaVersion literal
//gsoap fts  service method-action:	getSchemaVersion ""
int fts__getSchemaVersion(
    struct fts__getSchemaVersionResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * fts__getInterfaceVersion                                                   *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "fts__getInterfaceVersionResponse" of service binding "FileTransferSoapBinding" operation "fts__getInterfaceVersion"
struct fts__getInterfaceVersionResponse
{
    std::string                         getInterfaceVersionReturn;
};

/// Operation "fts__getInterfaceVersion" of service binding "FileTransferSoapBinding"

/**

Operation details:

  - SOAP RPC literal style

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_fts__getInterfaceVersion(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    struct fts__getInterfaceVersionResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int fts__getInterfaceVersion(
    struct soap *soap,
    // request parameters:
    // response parameters:
    struct fts__getInterfaceVersionResponse&
  );
@endcode

C++ proxy class (defined in soapFileTransferSoapBindingProxy.h):
  class FileTransferSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap fts  service method-style:	getInterfaceVersion rpc
//gsoap fts  service method-encoding:	getInterfaceVersion literal
//gsoap fts  service method-action:	getInterfaceVersion ""
int fts__getInterfaceVersion(
    struct fts__getInterfaceVersionResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * fts__getServiceMetadata                                                    *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "fts__getServiceMetadataResponse" of service binding "FileTransferSoapBinding" operation "fts__getServiceMetadata"
struct fts__getServiceMetadataResponse
{
    std::string                         _getServiceMetadataReturn;
};

/// Operation "fts__getServiceMetadata" of service binding "FileTransferSoapBinding"

/**

Operation details:

  - SOAP RPC literal style

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_fts__getServiceMetadata(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         key,
    // response parameters:
    struct fts__getServiceMetadataResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int fts__getServiceMetadata(
    struct soap *soap,
    // request parameters:
    std::string                         key,
    // response parameters:
    struct fts__getServiceMetadataResponse&
  );
@endcode

C++ proxy class (defined in soapFileTransferSoapBindingProxy.h):
  class FileTransferSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap fts  service method-style:	getServiceMetadata rpc
//gsoap fts  service method-encoding:	getServiceMetadata literal
//gsoap fts  service method-action:	getServiceMetadata ""
int fts__getServiceMetadata(
    std::string                         _key,	///< Request parameter
    struct fts__getServiceMetadataResponse&	///< Response struct parameter
);

/* End of fts3-transfer-submit */
